

Microchip MPLAB XC8 Assembler V2.10 build 88905656 
                                                                                               Sun Feb 09 20:58:24 2020

Microchip MPLAB XC8 C Compiler v2.10 (Free license) build 20190730164152 Og1 
     1                           	processor	16F887
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	maintext,global,class=CODE,split=1,delta=2
    10                           	psect	text1,local,class=CODE,merge=1,delta=2
    11                           	psect	text2,local,class=CODE,merge=1,delta=2,group=1
    12                           	psect	text3,local,class=CODE,merge=1,delta=2,group=1
    13                           	psect	text4,local,class=CODE,merge=1,delta=2
    14                           	psect	text5,local,class=CODE,merge=1,delta=2
    15                           	psect	text6,local,class=CODE,merge=1,delta=2
    16                           	psect	text7,local,class=CODE,merge=1,delta=2
    17                           	psect	text8,local,class=CODE,merge=1,delta=2
    18                           	psect	text9,local,class=CODE,merge=1,delta=2,group=1
    19                           	psect	text10,local,class=CODE,merge=1,delta=2
    20                           	psect	text11,local,class=CODE,merge=1,delta=2
    21                           	psect	text12,local,class=CODE,merge=1,delta=2
    22                           	psect	text13,local,class=CODE,merge=1,delta=2
    23                           	psect	text14,local,class=CODE,merge=1,delta=2
    24                           	dabs	1,0x7E,2
    25  0000                     
    26                           ; Version 2.10
    27                           ; Generated 31/07/2019 GMT
    28                           ; 
    29                           ; Copyright Â© 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
    30                           ; All rights reserved.
    31                           ; 
    32                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    33                           ; 
    34                           ; Redistribution and use in source and binary forms, with or without modification, are
    35                           ; permitted provided that the following conditions are met:
    36                           ; 
    37                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    38                           ;        conditions and the following disclaimer.
    39                           ; 
    40                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    41                           ;        of conditions and the following disclaimer in the documentation and/or other
    42                           ;        materials provided with the distribution.
    43                           ; 
    44                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    45                           ;        software without specific prior written permission.
    46                           ; 
    47                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    48                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    49                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    50                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    51                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    52                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    53                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    54                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    55                           ; 
    56                           ; 
    57                           ; Code-generator required, PIC16F887 Definitions
    58                           ; 
    59                           ; SFR Addresses
    60  0000                     	;# 
    61  0001                     	;# 
    62  0002                     	;# 
    63  0003                     	;# 
    64  0004                     	;# 
    65  0005                     	;# 
    66  0006                     	;# 
    67  0007                     	;# 
    68  0008                     	;# 
    69  0009                     	;# 
    70  000A                     	;# 
    71  000B                     	;# 
    72  000C                     	;# 
    73  000D                     	;# 
    74  000E                     	;# 
    75  000E                     	;# 
    76  000F                     	;# 
    77  0010                     	;# 
    78  0011                     	;# 
    79  0012                     	;# 
    80  0013                     	;# 
    81  0014                     	;# 
    82  0015                     	;# 
    83  0015                     	;# 
    84  0016                     	;# 
    85  0017                     	;# 
    86  0018                     	;# 
    87  0019                     	;# 
    88  001A                     	;# 
    89  001B                     	;# 
    90  001B                     	;# 
    91  001C                     	;# 
    92  001D                     	;# 
    93  001E                     	;# 
    94  001F                     	;# 
    95  0081                     	;# 
    96  0085                     	;# 
    97  0086                     	;# 
    98  0087                     	;# 
    99  0088                     	;# 
   100  0089                     	;# 
   101  008C                     	;# 
   102  008D                     	;# 
   103  008E                     	;# 
   104  008F                     	;# 
   105  0090                     	;# 
   106  0091                     	;# 
   107  0092                     	;# 
   108  0093                     	;# 
   109  0093                     	;# 
   110  0093                     	;# 
   111  0094                     	;# 
   112  0095                     	;# 
   113  0096                     	;# 
   114  0097                     	;# 
   115  0098                     	;# 
   116  0099                     	;# 
   117  009A                     	;# 
   118  009B                     	;# 
   119  009C                     	;# 
   120  009D                     	;# 
   121  009E                     	;# 
   122  009F                     	;# 
   123  0105                     	;# 
   124  0107                     	;# 
   125  0108                     	;# 
   126  0109                     	;# 
   127  010C                     	;# 
   128  010C                     	;# 
   129  010D                     	;# 
   130  010E                     	;# 
   131  010F                     	;# 
   132  0185                     	;# 
   133  0187                     	;# 
   134  0188                     	;# 
   135  0189                     	;# 
   136  018C                     	;# 
   137  018D                     	;# 
   138  0000                     	;# 
   139  0001                     	;# 
   140  0002                     	;# 
   141  0003                     	;# 
   142  0004                     	;# 
   143  0005                     	;# 
   144  0006                     	;# 
   145  0007                     	;# 
   146  0008                     	;# 
   147  0009                     	;# 
   148  000A                     	;# 
   149  000B                     	;# 
   150  000C                     	;# 
   151  000D                     	;# 
   152  000E                     	;# 
   153  000E                     	;# 
   154  000F                     	;# 
   155  0010                     	;# 
   156  0011                     	;# 
   157  0012                     	;# 
   158  0013                     	;# 
   159  0014                     	;# 
   160  0015                     	;# 
   161  0015                     	;# 
   162  0016                     	;# 
   163  0017                     	;# 
   164  0018                     	;# 
   165  0019                     	;# 
   166  001A                     	;# 
   167  001B                     	;# 
   168  001B                     	;# 
   169  001C                     	;# 
   170  001D                     	;# 
   171  001E                     	;# 
   172  001F                     	;# 
   173  0081                     	;# 
   174  0085                     	;# 
   175  0086                     	;# 
   176  0087                     	;# 
   177  0088                     	;# 
   178  0089                     	;# 
   179  008C                     	;# 
   180  008D                     	;# 
   181  008E                     	;# 
   182  008F                     	;# 
   183  0090                     	;# 
   184  0091                     	;# 
   185  0092                     	;# 
   186  0093                     	;# 
   187  0093                     	;# 
   188  0093                     	;# 
   189  0094                     	;# 
   190  0095                     	;# 
   191  0096                     	;# 
   192  0097                     	;# 
   193  0098                     	;# 
   194  0099                     	;# 
   195  009A                     	;# 
   196  009B                     	;# 
   197  009C                     	;# 
   198  009D                     	;# 
   199  009E                     	;# 
   200  009F                     	;# 
   201  0105                     	;# 
   202  0107                     	;# 
   203  0108                     	;# 
   204  0109                     	;# 
   205  010C                     	;# 
   206  010C                     	;# 
   207  010D                     	;# 
   208  010E                     	;# 
   209  010F                     	;# 
   210  0185                     	;# 
   211  0187                     	;# 
   212  0188                     	;# 
   213  0189                     	;# 
   214  018C                     	;# 
   215  018D                     	;# 
   216  0000                     	;# 
   217  0001                     	;# 
   218  0002                     	;# 
   219  0003                     	;# 
   220  0004                     	;# 
   221  0005                     	;# 
   222  0006                     	;# 
   223  0007                     	;# 
   224  0008                     	;# 
   225  0009                     	;# 
   226  000A                     	;# 
   227  000B                     	;# 
   228  000C                     	;# 
   229  000D                     	;# 
   230  000E                     	;# 
   231  000E                     	;# 
   232  000F                     	;# 
   233  0010                     	;# 
   234  0011                     	;# 
   235  0012                     	;# 
   236  0013                     	;# 
   237  0014                     	;# 
   238  0015                     	;# 
   239  0015                     	;# 
   240  0016                     	;# 
   241  0017                     	;# 
   242  0018                     	;# 
   243  0019                     	;# 
   244  001A                     	;# 
   245  001B                     	;# 
   246  001B                     	;# 
   247  001C                     	;# 
   248  001D                     	;# 
   249  001E                     	;# 
   250  001F                     	;# 
   251  0081                     	;# 
   252  0085                     	;# 
   253  0086                     	;# 
   254  0087                     	;# 
   255  0088                     	;# 
   256  0089                     	;# 
   257  008C                     	;# 
   258  008D                     	;# 
   259  008E                     	;# 
   260  008F                     	;# 
   261  0090                     	;# 
   262  0091                     	;# 
   263  0092                     	;# 
   264  0093                     	;# 
   265  0093                     	;# 
   266  0093                     	;# 
   267  0094                     	;# 
   268  0095                     	;# 
   269  0096                     	;# 
   270  0097                     	;# 
   271  0098                     	;# 
   272  0099                     	;# 
   273  009A                     	;# 
   274  009B                     	;# 
   275  009C                     	;# 
   276  009D                     	;# 
   277  009E                     	;# 
   278  009F                     	;# 
   279  0105                     	;# 
   280  0107                     	;# 
   281  0108                     	;# 
   282  0109                     	;# 
   283  010C                     	;# 
   284  010C                     	;# 
   285  010D                     	;# 
   286  010E                     	;# 
   287  010F                     	;# 
   288  0185                     	;# 
   289  0187                     	;# 
   290  0188                     	;# 
   291  0189                     	;# 
   292  018C                     	;# 
   293  018D                     	;# 
   294  0000                     	;# 
   295  0001                     	;# 
   296  0002                     	;# 
   297  0003                     	;# 
   298  0004                     	;# 
   299  0005                     	;# 
   300  0006                     	;# 
   301  0007                     	;# 
   302  0008                     	;# 
   303  0009                     	;# 
   304  000A                     	;# 
   305  000B                     	;# 
   306  000C                     	;# 
   307  000D                     	;# 
   308  000E                     	;# 
   309  000E                     	;# 
   310  000F                     	;# 
   311  0010                     	;# 
   312  0011                     	;# 
   313  0012                     	;# 
   314  0013                     	;# 
   315  0014                     	;# 
   316  0015                     	;# 
   317  0015                     	;# 
   318  0016                     	;# 
   319  0017                     	;# 
   320  0018                     	;# 
   321  0019                     	;# 
   322  001A                     	;# 
   323  001B                     	;# 
   324  001B                     	;# 
   325  001C                     	;# 
   326  001D                     	;# 
   327  001E                     	;# 
   328  001F                     	;# 
   329  0081                     	;# 
   330  0085                     	;# 
   331  0086                     	;# 
   332  0087                     	;# 
   333  0088                     	;# 
   334  0089                     	;# 
   335  008C                     	;# 
   336  008D                     	;# 
   337  008E                     	;# 
   338  008F                     	;# 
   339  0090                     	;# 
   340  0091                     	;# 
   341  0092                     	;# 
   342  0093                     	;# 
   343  0093                     	;# 
   344  0093                     	;# 
   345  0094                     	;# 
   346  0095                     	;# 
   347  0096                     	;# 
   348  0097                     	;# 
   349  0098                     	;# 
   350  0099                     	;# 
   351  009A                     	;# 
   352  009B                     	;# 
   353  009C                     	;# 
   354  009D                     	;# 
   355  009E                     	;# 
   356  009F                     	;# 
   357  0105                     	;# 
   358  0107                     	;# 
   359  0108                     	;# 
   360  0109                     	;# 
   361  010C                     	;# 
   362  010C                     	;# 
   363  010D                     	;# 
   364  010E                     	;# 
   365  010F                     	;# 
   366  0185                     	;# 
   367  0187                     	;# 
   368  0188                     	;# 
   369  0189                     	;# 
   370  018C                     	;# 
   371  018D                     	;# 
   372  0000                     	;# 
   373  0001                     	;# 
   374  0002                     	;# 
   375  0003                     	;# 
   376  0004                     	;# 
   377  0005                     	;# 
   378  0006                     	;# 
   379  0007                     	;# 
   380  0008                     	;# 
   381  0009                     	;# 
   382  000A                     	;# 
   383  000B                     	;# 
   384  000C                     	;# 
   385  000D                     	;# 
   386  000E                     	;# 
   387  000E                     	;# 
   388  000F                     	;# 
   389  0010                     	;# 
   390  0011                     	;# 
   391  0012                     	;# 
   392  0013                     	;# 
   393  0014                     	;# 
   394  0015                     	;# 
   395  0015                     	;# 
   396  0016                     	;# 
   397  0017                     	;# 
   398  0018                     	;# 
   399  0019                     	;# 
   400  001A                     	;# 
   401  001B                     	;# 
   402  001B                     	;# 
   403  001C                     	;# 
   404  001D                     	;# 
   405  001E                     	;# 
   406  001F                     	;# 
   407  0081                     	;# 
   408  0085                     	;# 
   409  0086                     	;# 
   410  0087                     	;# 
   411  0088                     	;# 
   412  0089                     	;# 
   413  008C                     	;# 
   414  008D                     	;# 
   415  008E                     	;# 
   416  008F                     	;# 
   417  0090                     	;# 
   418  0091                     	;# 
   419  0092                     	;# 
   420  0093                     	;# 
   421  0093                     	;# 
   422  0093                     	;# 
   423  0094                     	;# 
   424  0095                     	;# 
   425  0096                     	;# 
   426  0097                     	;# 
   427  0098                     	;# 
   428  0099                     	;# 
   429  009A                     	;# 
   430  009B                     	;# 
   431  009C                     	;# 
   432  009D                     	;# 
   433  009E                     	;# 
   434  009F                     	;# 
   435  0105                     	;# 
   436  0107                     	;# 
   437  0108                     	;# 
   438  0109                     	;# 
   439  010C                     	;# 
   440  010C                     	;# 
   441  010D                     	;# 
   442  010E                     	;# 
   443  010F                     	;# 
   444  0185                     	;# 
   445  0187                     	;# 
   446  0188                     	;# 
   447  0189                     	;# 
   448  018C                     	;# 
   449  018D                     	;# 
   450                           
   451                           	psect	strings
   452  0003                     __pstrings:	
   453  0003                     stringtab:	
   454  0003                     __stringtab:	
   455  0003                     stringcode:	
   456                           ;	String table - string pointers are 1 byte each
   457                           
   458  0003                     stringdir:	
   459  0003  3000               	movlw	high stringdir
   460  0004  008A               	movwf	10
   461  0005  0804               	movf	4,w
   462  0006  0A84               	incf	4,f
   463  0007  0782               	addwf	2,f
   464  0008                     __stringbase:	
   465  0008  3400               	retlw	0
   466  0009                     __end_of__stringtab:	
   467  0009                     _dpowers:	
   468  0009  3401               	retlw	1
   469  000A  3400               	retlw	0
   470  000B  340A               	retlw	10
   471  000C  3400               	retlw	0
   472  000D  3464               	retlw	100
   473  000E  3400               	retlw	0
   474  000F  34E8               	retlw	232
   475  0010  3403               	retlw	3
   476  0011  3410               	retlw	16
   477  0012  3427               	retlw	39
   478  0013                     __end_of_dpowers:	
   479  001A                     _RCREG	set	26
   480  0019                     _TXREG	set	25
   481  001E                     _ADRESH	set	30
   482  001F                     _ADCON0bits	set	31
   483  0009                     _PORTE	set	9
   484  0008                     _PORTD	set	8
   485  0006                     _PORTB	set	6
   486  0005                     _PORTA	set	5
   487  00C4                     _CREN	set	196
   488  00C7                     _SPEN	set	199
   489  0065                     _RCIF	set	101
   490  0037                     _RB7	set	55
   491  0036                     _RB6	set	54
   492  0035                     _RB5	set	53
   493  0034                     _RB4	set	52
   494  0033                     _RB3	set	51
   495  0032                     _RB2	set	50
   496  0031                     _RB1	set	49
   497  0030                     _RB0	set	48
   498  0049                     _RE1	set	73
   499  0048                     _RE0	set	72
   500  0099                     _SPBRG	set	153
   501  0086                     _TRISBbits	set	134
   502  0089                     _TRISEbits	set	137
   503  0085                     _TRISAbits	set	133
   504  009F                     _ADCON1	set	159
   505  0085                     _TRISA	set	133
   506  0088                     _TRISD	set	136
   507  0089                     _TRISE	set	137
   508  0086                     _TRISB	set	134
   509  04C1                     _TRMT	set	1217
   510  04C5                     _TXEN	set	1221
   511  043E                     _TRISC6	set	1086
   512  043F                     _TRISC7	set	1087
   513  04C4                     _SYNC	set	1220
   514  04C2                     _BRGH	set	1218
   515  0189                     _ANSELHbits	set	393
   516  0188                     _ANSELbits	set	392
   517  0189                     _ANSELH	set	393
   518  0188                     _ANSEL	set	392
   519  0013                     STR_2:	
   520  0013  3456               	retlw	86	;'V'
   521  0014  3431               	retlw	49	;'1'
   522  0015  3420               	retlw	32	;' '
   523  0016  3420               	retlw	32	;' '
   524  0017  3420               	retlw	32	;' '
   525  0018  3420               	retlw	32	;' '
   526  0019  3420               	retlw	32	;' '
   527  001A  3420               	retlw	32	;' '
   528  001B  3456               	retlw	86	;'V'
   529  001C  3432               	retlw	50	;'2'
   530  001D  3420               	retlw	32	;' '
   531  001E  3420               	retlw	32	;' '
   532  001F  3420               	retlw	32	;' '
   533  0020  3420               	retlw	32	;' '
   534  0021  3420               	retlw	32	;' '
   535  0022  3420               	retlw	32	;' '
   536  0023  3463               	retlw	99	;'c'
   537  0024  346F               	retlw	111	;'o'
   538  0025  346E               	retlw	110	;'n'
   539  0026  3474               	retlw	116	;'t'
   540  0027  3461               	retlw	97	;'a'
   541  0028  3464               	retlw	100	;'d'
   542  0029  346F               	retlw	111	;'o'
   543  002A  3472               	retlw	114	;'r'
   544  002B  3420               	retlw	32	;' '
   545  002C  3400               	retlw	0
   546  002D                     STR_1:	
   547  002D  3425               	retlw	37	;'%'
   548  002E  3464               	retlw	100	;'d'
   549  002F  3400               	retlw	0
   550                           
   551                           ; #config settings
   552  0000                     
   553                           	psect	cinit
   554  07F0                     start_initialization:	
   555  07F0                     __initialization:	
   556                           
   557                           ; Clear objects allocated to BANK0
   558  07F0  1283               	bcf	3,5	;RP0=0, select bank0
   559  07F1  1303               	bcf	3,6	;RP1=0, select bank0
   560  07F2  01B9               	clrf	__pbssBANK0& (0+127)
   561  07F3  01BA               	clrf	(__pbssBANK0+1)& (0+127)
   562  07F4  01BB               	clrf	(__pbssBANK0+2)& (0+127)
   563  07F5  01BC               	clrf	(__pbssBANK0+3)& (0+127)
   564  07F6  01BD               	clrf	(__pbssBANK0+4)& (0+127)
   565  07F7  01BE               	clrf	(__pbssBANK0+5)& (0+127)
   566  07F8  01BF               	clrf	(__pbssBANK0+6)& (0+127)
   567  07F9  01C0               	clrf	(__pbssBANK0+7)& (0+127)
   568  07FA  01C1               	clrf	(__pbssBANK0+8)& (0+127)
   569  07FB  01C2               	clrf	(__pbssBANK0+9)& (0+127)
   570  07FC                     end_of_initialization:	
   571                           ;End of C runtime variable initialization code
   572                           
   573  07FC                     __end_of__initialization:	
   574  07FC  0183               	clrf	3
   575  07FD  120A  118A  2D04   	ljmp	_main	;jump to C main() function
   576                           
   577                           	psect	bssBANK0
   578  0039                     __pbssBANK0:	
   579  0039                     _contador:	
   580  0039                     	ds	1
   581  003A                     _lecturaUSART:	
   582  003A                     	ds	1
   583  003B                     _valor:	
   584  003B                     	ds	8
   585                           
   586                           	psect	cstackCOMMON
   587  0070                     __pcstackCOMMON:	
   588  0070                     ?_PUERTO:	
   589  0070                     ??_PUERTO:	
   590                           ; 1 bytes @ 0x0
   591                           
   592  0070                     ?_configIO:	
   593                           ; 1 bytes @ 0x0
   594                           
   595  0070                     ??_configIO:	
   596                           ; 1 bytes @ 0x0
   597                           
   598  0070                     ?_configADC:	
   599                           ; 1 bytes @ 0x0
   600                           
   601  0070                     ??_configADC:	
   602                           ; 1 bytes @ 0x0
   603                           
   604  0070                     ?_Read_USART:	
   605                           ; 1 bytes @ 0x0
   606                           
   607  0070                     ??_Read_USART:	
   608                           ; 1 bytes @ 0x0
   609                           
   610  0070                     ?_Write_USART_String:	
   611                           ; 1 bytes @ 0x0
   612                           
   613  0070                     ?_Write_USART:	
   614                           ; 1 bytes @ 0x0
   615                           
   616  0070                     ??_Write_USART:	
   617                           ; 1 bytes @ 0x0
   618                           
   619  0070                     ?_comandosLCD:	
   620                           ; 1 bytes @ 0x0
   621                           
   622  0070                     ?_LCD_clear:	
   623                           ; 1 bytes @ 0x0
   624                           
   625  0070                     ?_LCD_Init:	
   626                           ; 1 bytes @ 0x0
   627                           
   628  0070                     ?_main:	
   629                           ; 1 bytes @ 0x0
   630                           
   631  0070                     ?___lwdiv:	
   632                           ; 1 bytes @ 0x0
   633                           
   634  0070                     ?___aldiv:	
   635                           ; 2 bytes @ 0x0
   636                           
   637  0070                     PUERTO@x:	
   638                           ; 4 bytes @ 0x0
   639                           
   640  0070                     Write_USART@x:	
   641                           ; 1 bytes @ 0x0
   642                           
   643  0070                     ___lwdiv@divisor:	
   644                           ; 1 bytes @ 0x0
   645                           
   646  0070                     ___aldiv@divisor:	
   647                           ; 2 bytes @ 0x0
   648                           
   649                           
   650                           ; 4 bytes @ 0x0
   651  0070                     	ds	1
   652  0071                     ??_Write_USART_String:	
   653  0071                     ??_comandosLCD:	
   654                           ; 1 bytes @ 0x1
   655                           
   656  0071                     ??_LCD_Init:	
   657                           ; 1 bytes @ 0x1
   658                           
   659                           
   660                           ; 1 bytes @ 0x1
   661  0071                     	ds	1
   662  0072                     Write_USART_String@a:	
   663  0072                     ___lwdiv@dividend:	
   664                           ; 1 bytes @ 0x2
   665                           
   666                           
   667                           ; 2 bytes @ 0x2
   668  0072                     	ds	1
   669  0073                     comandosLCD@x:	
   670  0073                     Write_USART_String@i:	
   671                           ; 1 bytes @ 0x3
   672                           
   673                           
   674                           ; 1 bytes @ 0x3
   675  0073                     	ds	1
   676  0074                     ??_LCD_clear:	
   677  0074                     ??___lwdiv:	
   678                           ; 1 bytes @ 0x4
   679                           
   680  0074                     ___aldiv@dividend:	
   681                           ; 1 bytes @ 0x4
   682                           
   683                           
   684                           ; 4 bytes @ 0x4
   685  0074                     	ds	1
   686  0075                     ___lwdiv@quotient:	
   687                           
   688                           ; 2 bytes @ 0x5
   689  0075                     	ds	2
   690  0077                     ___lwdiv@counter:	
   691                           
   692                           ; 1 bytes @ 0x7
   693  0077                     	ds	1
   694  0078                     ??___aldiv:	
   695  0078                     ?___lwmod:	
   696                           ; 1 bytes @ 0x8
   697                           
   698  0078                     ___lwmod@divisor:	
   699                           ; 2 bytes @ 0x8
   700                           
   701                           
   702                           ; 2 bytes @ 0x8
   703  0078                     	ds	1
   704  0079                     USART_Init@x:	
   705                           
   706                           ; 2 bytes @ 0x9
   707  0079                     	ds	1
   708  007A                     ___lwmod@dividend:	
   709                           
   710                           ; 2 bytes @ 0xA
   711  007A                     	ds	2
   712  007C                     ??___lwmod:	
   713                           
   714                           ; 1 bytes @ 0xC
   715  007C                     	ds	1
   716  007D                     ___lwmod@counter:	
   717                           
   718                           ; 1 bytes @ 0xD
   719  007D                     	ds	1
   720                           
   721                           	psect	cstackBANK0
   722  0020                     __pcstackBANK0:	
   723  0020                     ?_sprintf:	
   724  0020                     sprintf@f:	
   725                           ; 2 bytes @ 0x0
   726                           
   727  0020                     ___aldiv@counter:	
   728                           ; 1 bytes @ 0x0
   729                           
   730                           
   731                           ; 1 bytes @ 0x0
   732  0020                     	ds	1
   733  0021                     ___aldiv@sign:	
   734                           
   735                           ; 1 bytes @ 0x1
   736  0021                     	ds	1
   737  0022                     ___aldiv@quotient:	
   738                           
   739                           ; 4 bytes @ 0x2
   740  0022                     	ds	1
   741  0023                     ??_sprintf:	
   742                           
   743                           ; 1 bytes @ 0x3
   744  0023                     	ds	3
   745  0026                     ?_USART_Init:	
   746  0026                     sprintf@ap:	
   747                           ; 1 bytes @ 0x6
   748                           
   749  0026                     USART_Init@baudrate:	
   750                           ; 1 bytes @ 0x6
   751                           
   752                           
   753                           ; 4 bytes @ 0x6
   754  0026                     	ds	1
   755  0027                     sprintf@flag:	
   756                           
   757                           ; 1 bytes @ 0x7
   758  0027                     	ds	1
   759  0028                     sprintf@prec:	
   760                           
   761                           ; 1 bytes @ 0x8
   762  0028                     	ds	1
   763  0029                     sprintf@val:	
   764                           
   765                           ; 2 bytes @ 0x9
   766  0029                     	ds	1
   767  002A                     ??_USART_Init:	
   768                           
   769                           ; 1 bytes @ 0xA
   770  002A                     	ds	1
   771  002B                     sprintf@sp:	
   772                           
   773                           ; 1 bytes @ 0xB
   774  002B                     	ds	1
   775  002C                     sprintf@c:	
   776                           
   777                           ; 1 bytes @ 0xC
   778  002C                     	ds	10
   779  0036                     ??_main:	
   780                           
   781                           ; 1 bytes @ 0x16
   782  0036                     	ds	3
   783                           
   784                           	psect	maintext
   785  0504                     __pmaintext:	
   786 ;;
   787 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   788 ;;
   789 ;; *************** function _main *****************
   790 ;; Defined at:
   791 ;;		line 46 in file "LAB3.c"
   792 ;; Parameters:    Size  Location     Type
   793 ;;		None
   794 ;; Auto vars:     Size  Location     Type
   795 ;;		None
   796 ;; Return value:  Size  Location     Type
   797 ;;                  1    wreg      void 
   798 ;; Registers used:
   799 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   800 ;; Tracked objects:
   801 ;;		On entry : B00/0
   802 ;;		On exit  : 0/0
   803 ;;		Unchanged: 0/0
   804 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   805 ;;      Params:         0       0       0       0       0
   806 ;;      Locals:         0       0       0       0       0
   807 ;;      Temps:          0       3       0       0       0
   808 ;;      Totals:         0       3       0       0       0
   809 ;;Total ram usage:        3 bytes
   810 ;; Hardware stack levels required when called:    3
   811 ;; This function calls:
   812 ;;		_LCD_Init
   813 ;;		_LCD_clear
   814 ;;		_Read_USART
   815 ;;		_USART_Init
   816 ;;		_Write_USART
   817 ;;		_Write_USART_String
   818 ;;		_configADC
   819 ;;		_configIO
   820 ;;		_sprintf
   821 ;; This function is called by:
   822 ;;		Startup code after reset
   823 ;; This function uses a non-reentrant model
   824 ;;
   825                           
   826                           
   827                           ;psect for function _main
   828  0504                     _main:	
   829  0504                     l1535:	
   830                           ;incstack = 0
   831                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   832                           
   833                           
   834                           ;LAB3.c: 47:     configIO();
   835  0504  120A  118A  23B3  120A  118A  	fcall	_configIO
   836  0509                     l1537:	
   837                           
   838                           ;LAB3.c: 48:     configADC();
   839  0509  120A  118A  239D  120A  118A  	fcall	_configADC
   840  050E                     l1539:	
   841                           
   842                           ;LAB3.c: 49:     USART_Init(9600);
   843  050E  3000               	movlw	0
   844  050F  1283               	bcf	3,5	;RP0=0, select bank0
   845  0510  1303               	bcf	3,6	;RP1=0, select bank0
   846  0511  00A9               	movwf	USART_Init@baudrate+3
   847  0512  3000               	movlw	0
   848  0513  00A8               	movwf	USART_Init@baudrate+2
   849  0514  3025               	movlw	37
   850  0515  00A7               	movwf	USART_Init@baudrate+1
   851  0516  3080               	movlw	128
   852  0517  00A6               	movwf	USART_Init@baudrate
   853  0518  120A  118A  262E  120A  118A  	fcall	_USART_Init
   854  051D                     l1541:	
   855                           
   856                           ;LAB3.c: 50:     LCD_Init();
   857  051D  120A  118A  24B9  120A  118A  	fcall	_LCD_Init
   858  0522                     l1543:	
   859                           
   860                           ;LAB3.c: 51:     LCD_clear();
   861  0522  120A  118A  238E  120A  118A  	fcall	_LCD_clear
   862  0527                     l1545:	
   863                           
   864                           ;LAB3.c: 53:         if(RCIF==1){lecturaUSART=Read_USART();}
   865  0527  1283               	bcf	3,5	;RP0=0, select bank0
   866  0528  1303               	bcf	3,6	;RP1=0, select bank0
   867  0529  1E8C               	btfss	12,5	;volatile
   868  052A  2D2C               	goto	u1121
   869  052B  2D2D               	goto	u1120
   870  052C                     u1121:	
   871  052C  2D37               	goto	l1549
   872  052D                     u1120:	
   873  052D                     l1547:	
   874  052D  120A  118A  2395  120A  118A  	fcall	_Read_USART
   875  0532  1283               	bcf	3,5	;RP0=0, select bank0
   876  0533  1303               	bcf	3,6	;RP1=0, select bank0
   877  0534  00B6               	movwf	??_main
   878  0535  0836               	movf	??_main,w
   879  0536  00BA               	movwf	_lecturaUSART
   880  0537                     l1549:	
   881                           
   882                           ;LAB3.c: 54:         if(lecturaUSART==43){contador++;}
   883  0537  302B               	movlw	43
   884  0538  063A               	xorwf	_lecturaUSART,w
   885  0539  1D03               	btfss	3,2
   886  053A  2D3C               	goto	u1131
   887  053B  2D3D               	goto	u1130
   888  053C                     u1131:	
   889  053C  2D42               	goto	l1553
   890  053D                     u1130:	
   891  053D                     l1551:	
   892  053D  3001               	movlw	1
   893  053E  00B6               	movwf	??_main
   894  053F  0836               	movf	??_main,w
   895  0540  07B9               	addwf	_contador,f
   896  0541  2D4A               	goto	l1557
   897  0542                     l1553:	
   898  0542  302D               	movlw	45
   899  0543  063A               	xorwf	_lecturaUSART,w
   900  0544  1D03               	btfss	3,2
   901  0545  2D47               	goto	u1141
   902  0546  2D48               	goto	u1140
   903  0547                     u1141:	
   904  0547  2D4A               	goto	l1557
   905  0548                     u1140:	
   906  0548                     l1555:	
   907  0548  3001               	movlw	1
   908  0549  02B9               	subwf	_contador,f
   909  054A                     l1557:	
   910                           
   911                           ;LAB3.c: 56:         sprintf(valor,"%d", contador);
   912  054A  3025               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   913  054B  00B6               	movwf	??_main
   914  054C  0836               	movf	??_main,w
   915  054D  00A0               	movwf	sprintf@f
   916  054E  0839               	movf	_contador,w
   917  054F  00B7               	movwf	??_main+1
   918  0550  01B8               	clrf	??_main+2
   919  0551  0837               	movf	??_main+1,w
   920  0552  00A1               	movwf	?_sprintf+1
   921  0553  0838               	movf	??_main+2,w
   922  0554  00A2               	movwf	?_sprintf+2
   923  0555  303B               	movlw	(low (_valor| 0))& (0+255)
   924  0556  120A  118A  2708  120A  118A  	fcall	_sprintf
   925  055B                     l1559:	
   926                           
   927                           ;LAB3.c: 57:         Write_USART_String("V1      V2      contador ");
   928  055B  300B               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
   929  055C  120A  118A  23DB  120A  118A  	fcall	_Write_USART_String
   930  0561                     l1561:	
   931                           
   932                           ;LAB3.c: 58:         Write_USART(13);
   933  0561  300D               	movlw	13
   934  0562  120A  118A  23A7  120A  118A  	fcall	_Write_USART
   935  0567                     l1563:	
   936                           
   937                           ;LAB3.c: 59:         Write_USART(10);
   938  0567  300A               	movlw	10
   939  0568  120A  118A  23A7  120A  118A  	fcall	_Write_USART
   940  056D                     l1565:	
   941                           
   942                           ;LAB3.c: 60:         Write_USART(valor);
   943  056D  303B               	movlw	(low _valor)& (0+255)
   944  056E  120A  118A  23A7  120A  118A  	fcall	_Write_USART
   945  0573                     l1567:	
   946                           
   947                           ;LAB3.c: 61:         Write_USART(13);
   948  0573  300D               	movlw	13
   949  0574  120A  118A  23A7  120A  118A  	fcall	_Write_USART
   950  0579                     l1569:	
   951                           
   952                           ;LAB3.c: 62:         Write_USART(10);
   953  0579  300A               	movlw	10
   954  057A  120A  118A  23A7  120A  118A  	fcall	_Write_USART
   955  057F                     l1571:	
   956                           
   957                           ;LAB3.c: 63:         _delay((unsigned long)((1000)*(4000000/4000.0)));
   958  057F  3006               	movlw	6
   959  0580  1283               	bcf	3,5	;RP0=0, select bank0
   960  0581  1303               	bcf	3,6	;RP1=0, select bank0
   961  0582  00B8               	movwf	??_main+2
   962  0583  3013               	movlw	19
   963  0584  00B7               	movwf	??_main+1
   964  0585  30AD               	movlw	173
   965  0586  00B6               	movwf	??_main
   966  0587                     u1167:	
   967  0587  0BB6               	decfsz	??_main,f
   968  0588  2D87               	goto	u1167
   969  0589  0BB7               	decfsz	??_main+1,f
   970  058A  2D87               	goto	u1167
   971  058B  0BB8               	decfsz	??_main+2,f
   972  058C  2D87               	goto	u1167
   973  058D  2D27               	goto	l1545
   974  058E  120A  118A  2800   	ljmp	start
   975  0591                     __end_of_main:	
   976                           
   977                           	psect	text1
   978  0708                     __ptext1:	
   979 ;; *************** function _sprintf *****************
   980 ;; Defined at:
   981 ;;		line 505 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\doprnt.c"
   982 ;; Parameters:    Size  Location     Type
   983 ;;  sp              1    wreg     PTR unsigned char 
   984 ;;		 -> valor(8), 
   985 ;;  f               1    0[BANK0 ] PTR const unsigned char 
   986 ;;		 -> STR_1(3), 
   987 ;; Auto vars:     Size  Location     Type
   988 ;;  sp              1   11[BANK0 ] PTR unsigned char 
   989 ;;		 -> valor(8), 
   990 ;;  tmpval          4    0        struct .
   991 ;;  val             2    9[BANK0 ] unsigned int 
   992 ;;  cp              2    0        PTR const unsigned char 
   993 ;;  len             2    0        unsigned int 
   994 ;;  c               1   12[BANK0 ] unsigned char 
   995 ;;  prec            1    8[BANK0 ] char 
   996 ;;  flag            1    7[BANK0 ] unsigned char 
   997 ;;  ap              1    6[BANK0 ] PTR void [1]
   998 ;;		 -> ?_sprintf(2), 
   999 ;; Return value:  Size  Location     Type
  1000 ;;                  2    0[BANK0 ] int 
  1001 ;; Registers used:
  1002 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1003 ;; Tracked objects:
  1004 ;;		On entry : 0/0
  1005 ;;		On exit  : 0/0
  1006 ;;		Unchanged: 0/0
  1007 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1008 ;;      Params:         0       3       0       0       0
  1009 ;;      Locals:         0       7       0       0       0
  1010 ;;      Temps:          0       3       0       0       0
  1011 ;;      Totals:         0      13       0       0       0
  1012 ;;Total ram usage:       13 bytes
  1013 ;; Hardware stack levels used:    1
  1014 ;; Hardware stack levels required when called:    1
  1015 ;; This function calls:
  1016 ;;		___lwdiv
  1017 ;;		___lwmod
  1018 ;; This function is called by:
  1019 ;;		_main
  1020 ;; This function uses a non-reentrant model
  1021 ;;
  1022                           
  1023                           
  1024                           ;psect for function _sprintf
  1025  0708                     _sprintf:	
  1026                           
  1027                           ;incstack = 0
  1028                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1029                           ;sprintf@sp stored from wreg
  1030  0708  1283               	bcf	3,5	;RP0=0, select bank0
  1031  0709  1303               	bcf	3,6	;RP1=0, select bank0
  1032  070A  00AB               	movwf	sprintf@sp
  1033  070B                     l1441:	
  1034                           
  1035                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\doprnt.c: 505: sprint
      +                          f(char * sp, const char * f, ...);C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources
      +                          \c90\common\doprnt.c: 506: {;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\
      +                          common\doprnt.c: 507:  va_list ap;;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\source
      +                          s\c90\common\doprnt.c: 512:  char c;;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sour
      +                          ces\c90\common\doprnt.c: 521:  signed char prec;;C:\Program Files (x86)\Microchip\xc8\v2
      +                          .10\pic\sources\c90\common\doprnt.c: 525:  unsigned char flag;
  1036  070B  3021               	movlw	(low ((?_sprintf| 0+1)))& (0+255)
  1037  070C  00A3               	movwf	??_sprintf
  1038  070D  0823               	movf	??_sprintf,w
  1039  070E  00A6               	movwf	sprintf@ap
  1040                           
  1041                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\doprnt.c: 553:  while
      +                          ((c = *f++)) {
  1042  070F  2FD9               	goto	l1493
  1043  0710                     l1443:	
  1044                           
  1045                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\doprnt.c: 555:   if(c
      +                           != '%')
  1046  0710  3025               	movlw	37
  1047  0711  062C               	xorwf	sprintf@c,w
  1048  0712  1903               	btfsc	3,2
  1049  0713  2F15               	goto	u1011
  1050  0714  2F16               	goto	u1010
  1051  0715                     u1011:	
  1052  0715  2F22               	goto	l1449
  1053  0716                     u1010:	
  1054  0716                     l1445:	
  1055                           
  1056                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\doprnt.c: 557:   {;C:
      +                          \Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\doprnt.c: 558:    ((*sp+
      +                          + = (c)));
  1057  0716  082C               	movf	sprintf@c,w
  1058  0717  00A3               	movwf	??_sprintf
  1059  0718  082B               	movf	sprintf@sp,w
  1060  0719  0084               	movwf	4
  1061  071A  0823               	movf	??_sprintf,w
  1062  071B  1383               	bcf	3,7	;select IRP bank0
  1063  071C  0080               	movwf	0
  1064  071D                     l1447:	
  1065  071D  3001               	movlw	1
  1066  071E  00A3               	movwf	??_sprintf
  1067  071F  0823               	movf	??_sprintf,w
  1068  0720  07AB               	addwf	sprintf@sp,f
  1069                           
  1070                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\doprnt.c: 559:    con
      +                          tinue;
  1071  0721  2FD9               	goto	l1493
  1072  0722                     l1449:	
  1073                           
  1074                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\doprnt.c: 565:   flag
      +                           = 0;
  1075  0722  01A7               	clrf	sprintf@flag
  1076  0723                     l1453:	
  1077                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\doprnt.c: 661:   swit
      +                          ch(c = *f++) {
  1078                           
  1079  0723  3001               	movlw	1
  1080  0724  07A0               	addwf	sprintf@f,f
  1081  0725  30FF               	movlw	-1
  1082  0726  0720               	addwf	sprintf@f,w
  1083  0727  0084               	movwf	4
  1084  0728  120A  118A  2003  120A  118A  	fcall	stringdir
  1085  072D  00AC               	movwf	sprintf@c
  1086  072E  00A3               	movwf	??_sprintf
  1087  072F  01A4               	clrf	??_sprintf+1
  1088                           
  1089                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1090                           ; Switch size 1, requested type "simple"
  1091                           ; Number of cases is 1, Range of values is 0 to 0
  1092                           ; switch strategies available:
  1093                           ; Name         Instructions Cycles
  1094                           ; simple_byte            4     3 (average)
  1095                           ; direct_byte           11     8 (fixed)
  1096                           ; jumptable            260     6 (fixed)
  1097                           ;	Chosen strategy is simple_byte
  1098  0730  0824               	movf	??_sprintf+1,w
  1099  0731  3A00               	xorlw	0	; case 0
  1100  0732  1903               	skipnz
  1101  0733  2F35               	goto	l1601
  1102  0734  2FD9               	goto	l1493
  1103  0735                     l1601:	
  1104                           
  1105                           ; Switch size 1, requested type "simple"
  1106                           ; Number of cases is 3, Range of values is 0 to 105
  1107                           ; switch strategies available:
  1108                           ; Name         Instructions Cycles
  1109                           ; simple_byte           10     6 (average)
  1110                           ; jumptable            260     6 (fixed)
  1111                           ;	Chosen strategy is simple_byte
  1112  0735  0823               	movf	??_sprintf,w
  1113  0736  3A00               	xorlw	0	; case 0
  1114  0737  1903               	skipnz
  1115  0738  2FEB               	goto	l1495
  1116  0739  3A64               	xorlw	100	; case 100
  1117  073A  1903               	skipnz
  1118  073B  2F40               	goto	l1455
  1119  073C  3A0D               	xorlw	13	; case 105
  1120  073D  1903               	skipnz
  1121  073E  2F40               	goto	l1455
  1122  073F  2FD9               	goto	l1493
  1123  0740                     l1455:	
  1124                           
  1125                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\doprnt.c: 1279:   {;C
      +                          :\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\doprnt.c: 1285:     val
      +                           = (unsigned int)(*(int *)__va_arg((*(int **)ap), (int)0));
  1126  0740  0826               	movf	sprintf@ap,w
  1127  0741  0084               	movwf	4
  1128  0742  1383               	bcf	3,7	;select IRP bank0
  1129  0743  0800               	movf	0,w
  1130  0744  00A9               	movwf	sprintf@val
  1131  0745  0A84               	incf	4,f
  1132  0746  0800               	movf	0,w
  1133  0747  00AA               	movwf	sprintf@val+1
  1134  0748                     l1457:	
  1135  0748  3002               	movlw	2
  1136  0749  00A3               	movwf	??_sprintf
  1137  074A  0823               	movf	??_sprintf,w
  1138  074B  07A6               	addwf	sprintf@ap,f
  1139  074C                     l1459:	
  1140                           
  1141                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\doprnt.c: 1287:    if
      +                          ((int)val < 0) {
  1142  074C  1FAA               	btfss	sprintf@val+1,7
  1143  074D  2F4F               	goto	u1021
  1144  074E  2F50               	goto	u1020
  1145  074F                     u1021:	
  1146  074F  2F59               	goto	l1465
  1147  0750                     u1020:	
  1148  0750                     l1461:	
  1149                           
  1150                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\doprnt.c: 1288:     f
      +                          lag |= 0x03;
  1151  0750  3003               	movlw	3
  1152  0751  00A3               	movwf	??_sprintf
  1153  0752  0823               	movf	??_sprintf,w
  1154  0753  04A7               	iorwf	sprintf@flag,f
  1155  0754                     l1463:	
  1156                           
  1157                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\doprnt.c: 1289:     v
      +                          al = -val;
  1158  0754  09A9               	comf	sprintf@val,f
  1159  0755  09AA               	comf	sprintf@val+1,f
  1160  0756  0AA9               	incf	sprintf@val,f
  1161  0757  1903               	skipnz
  1162  0758  0AAA               	incf	sprintf@val+1,f
  1163  0759                     l1465:	
  1164                           
  1165                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\doprnt.c: 1292:   };C
      +                          :\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\doprnt.c: 1331:    for(
      +                          c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  1166  0759  01AC               	clrf	sprintf@c
  1167  075A  0AAC               	incf	sprintf@c,f
  1168  075B                     l1471:	
  1169                           
  1170                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\doprnt.c: 1332:     i
      +                          f(val < dpowers[c])
  1171  075B  082C               	movf	sprintf@c,w
  1172  075C  00A3               	movwf	??_sprintf
  1173  075D  0723               	addwf	??_sprintf,w
  1174  075E  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  1175  075F  0084               	movwf	4
  1176  0760  120A  118A  2003  120A  118A  	fcall	stringdir
  1177  0765  00A4               	movwf	??_sprintf+1
  1178  0766  120A  118A  2003  120A  118A  	fcall	stringdir
  1179  076B  00A5               	movwf	??_sprintf+2
  1180  076C  0825               	movf	??_sprintf+2,w
  1181  076D  022A               	subwf	sprintf@val+1,w
  1182  076E  1D03               	skipz
  1183  076F  2F72               	goto	u1035
  1184  0770  0824               	movf	??_sprintf+1,w
  1185  0771  0229               	subwf	sprintf@val,w
  1186  0772                     u1035:	
  1187  0772  1803               	skipnc
  1188  0773  2F75               	goto	u1031
  1189  0774  2F76               	goto	u1030
  1190  0775                     u1031:	
  1191  0775  2F77               	goto	l1475
  1192  0776                     u1030:	
  1193  0776  2F81               	goto	l1477
  1194  0777                     l1475:	
  1195  0777  3001               	movlw	1
  1196  0778  00A3               	movwf	??_sprintf
  1197  0779  0823               	movf	??_sprintf,w
  1198  077A  07AC               	addwf	sprintf@c,f
  1199  077B  3005               	movlw	5
  1200  077C  062C               	xorwf	sprintf@c,w
  1201  077D  1D03               	btfss	3,2
  1202  077E  2F80               	goto	u1041
  1203  077F  2F81               	goto	u1040
  1204  0780                     u1041:	
  1205  0780  2F5B               	goto	l1471
  1206  0781                     u1040:	
  1207  0781                     l1477:	
  1208                           
  1209                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\doprnt.c: 1448:   {;C
      +                          :\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\doprnt.c: 1464:    if(f
      +                          lag & 0x03)
  1210  0781  0827               	movf	sprintf@flag,w
  1211  0782  3903               	andlw	3
  1212  0783  1903               	btfsc	3,2
  1213  0784  2F86               	goto	u1051
  1214  0785  2F87               	goto	u1050
  1215  0786                     u1051:	
  1216  0786  2F92               	goto	l1483
  1217  0787                     u1050:	
  1218  0787                     l1479:	
  1219                           
  1220                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\doprnt.c: 1465:     (
      +                          (*sp++ = ('-')));
  1221  0787  302D               	movlw	45
  1222  0788  00A3               	movwf	??_sprintf
  1223  0789  082B               	movf	sprintf@sp,w
  1224  078A  0084               	movwf	4
  1225  078B  0823               	movf	??_sprintf,w
  1226  078C  1383               	bcf	3,7	;select IRP bank0
  1227  078D  0080               	movwf	0
  1228  078E                     l1481:	
  1229  078E  3001               	movlw	1
  1230  078F  00A3               	movwf	??_sprintf
  1231  0790  0823               	movf	??_sprintf,w
  1232  0791  07AB               	addwf	sprintf@sp,f
  1233  0792                     l1483:	
  1234                           
  1235                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\doprnt.c: 1495:   };C
      +                          :\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\doprnt.c: 1498:   prec 
      +                          = c;
  1236  0792  082C               	movf	sprintf@c,w
  1237  0793  00A3               	movwf	??_sprintf
  1238  0794  0823               	movf	??_sprintf,w
  1239  0795  00A8               	movwf	sprintf@prec
  1240                           
  1241                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\doprnt.c: 1500:   whi
      +                          le(prec--) {
  1242  0796  2FD0               	goto	l1491
  1243  0797                     l1485:	
  1244                           
  1245                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\doprnt.c: 1504:    {;
      +                          C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\doprnt.c: 1515:     c 
      +                          = (val / dpowers[(unsigned char)prec]) % 10 + '0';
  1246  0797  300A               	movlw	10
  1247  0798  00F8               	movwf	___lwmod@divisor
  1248  0799  3000               	movlw	0
  1249  079A  00F9               	movwf	___lwmod@divisor+1
  1250  079B  0828               	movf	sprintf@prec,w
  1251  079C  00A3               	movwf	??_sprintf
  1252  079D  0723               	addwf	??_sprintf,w
  1253  079E  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  1254  079F  0084               	movwf	4
  1255  07A0  120A  118A  2003  120A  118A  	fcall	stringdir
  1256  07A5  00F0               	movwf	___lwdiv@divisor
  1257  07A6  120A  118A  2003  120A  118A  	fcall	stringdir
  1258  07AB  00F1               	movwf	___lwdiv@divisor+1
  1259  07AC  082A               	movf	sprintf@val+1,w
  1260  07AD  00F3               	movwf	___lwdiv@dividend+1
  1261  07AE  0829               	movf	sprintf@val,w
  1262  07AF  00F2               	movwf	___lwdiv@dividend
  1263  07B0  120A  118A  2475  120A  118A  	fcall	___lwdiv
  1264  07B5  0871               	movf	?___lwdiv+1,w
  1265  07B6  00FB               	movwf	___lwmod@dividend+1
  1266  07B7  0870               	movf	?___lwdiv,w
  1267  07B8  00FA               	movwf	___lwmod@dividend
  1268  07B9  120A  118A  23FD  120A  118A  	fcall	___lwmod
  1269  07BE  0878               	movf	?___lwmod,w
  1270  07BF  3E30               	addlw	48
  1271  07C0  1283               	bcf	3,5	;RP0=0, select bank0
  1272  07C1  1303               	bcf	3,6	;RP1=0, select bank0
  1273  07C2  00A4               	movwf	??_sprintf+1
  1274  07C3  0824               	movf	??_sprintf+1,w
  1275  07C4  00AC               	movwf	sprintf@c
  1276  07C5                     l1487:	
  1277                           
  1278                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\doprnt.c: 1549:    };
      +                          C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\doprnt.c: 1550:    ((*
      +                          sp++ = (c)));
  1279  07C5  082C               	movf	sprintf@c,w
  1280  07C6  00A3               	movwf	??_sprintf
  1281  07C7  082B               	movf	sprintf@sp,w
  1282  07C8  0084               	movwf	4
  1283  07C9  0823               	movf	??_sprintf,w
  1284  07CA  1383               	bcf	3,7	;select IRP bank0
  1285  07CB  0080               	movwf	0
  1286  07CC                     l1489:	
  1287  07CC  3001               	movlw	1
  1288  07CD  00A3               	movwf	??_sprintf
  1289  07CE  0823               	movf	??_sprintf,w
  1290  07CF  07AB               	addwf	sprintf@sp,f
  1291  07D0                     l1491:	
  1292                           
  1293                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\doprnt.c: 1500:   whi
      +                          le(prec--) {
  1294  07D0  30FF               	movlw	255
  1295  07D1  00A3               	movwf	??_sprintf
  1296  07D2  0823               	movf	??_sprintf,w
  1297  07D3  07A8               	addwf	sprintf@prec,f
  1298  07D4  0A28               	incf	sprintf@prec,w
  1299  07D5  1D03               	btfss	3,2
  1300  07D6  2FD8               	goto	u1061
  1301  07D7  2FD9               	goto	u1060
  1302  07D8                     u1061:	
  1303  07D8  2F97               	goto	l1485
  1304  07D9                     u1060:	
  1305  07D9                     l1493:	
  1306                           
  1307                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\doprnt.c: 553:  while
      +                          ((c = *f++)) {
  1308  07D9  3001               	movlw	1
  1309  07DA  07A0               	addwf	sprintf@f,f
  1310  07DB  30FF               	movlw	-1
  1311  07DC  0720               	addwf	sprintf@f,w
  1312  07DD  0084               	movwf	4
  1313  07DE  120A  118A  2003  120A  118A  	fcall	stringdir
  1314  07E3  00A3               	movwf	??_sprintf
  1315  07E4  0823               	movf	??_sprintf,w
  1316  07E5  00AC               	movwf	sprintf@c
  1317  07E6  082C               	movf	sprintf@c,w
  1318  07E7  1D03               	btfss	3,2
  1319  07E8  2FEA               	goto	u1071
  1320  07E9  2FEB               	goto	u1070
  1321  07EA                     u1071:	
  1322  07EA  2F10               	goto	l1443
  1323  07EB                     u1070:	
  1324  07EB                     l1495:	
  1325                           
  1326                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\doprnt.c: 1564:  *sp 
      +                          = 0;
  1327  07EB  082B               	movf	sprintf@sp,w
  1328  07EC  0084               	movwf	4
  1329  07ED  1383               	bcf	3,7	;select IRP bank0
  1330  07EE  0180               	clrf	0
  1331  07EF                     l343:	
  1332  07EF  0008               	return
  1333  07F0                     __end_of_sprintf:	
  1334                           
  1335                           	psect	text2
  1336  03FD                     __ptext2:	
  1337 ;; *************** function ___lwmod *****************
  1338 ;; Defined at:
  1339 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\lwmod.c"
  1340 ;; Parameters:    Size  Location     Type
  1341 ;;  divisor         2    8[COMMON] unsigned int 
  1342 ;;  dividend        2   10[COMMON] unsigned int 
  1343 ;; Auto vars:     Size  Location     Type
  1344 ;;  counter         1   13[COMMON] unsigned char 
  1345 ;; Return value:  Size  Location     Type
  1346 ;;                  2    8[COMMON] unsigned int 
  1347 ;; Registers used:
  1348 ;;		wreg, status,2, status,0
  1349 ;; Tracked objects:
  1350 ;;		On entry : 0/0
  1351 ;;		On exit  : 0/0
  1352 ;;		Unchanged: 0/0
  1353 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1354 ;;      Params:         4       0       0       0       0
  1355 ;;      Locals:         1       0       0       0       0
  1356 ;;      Temps:          1       0       0       0       0
  1357 ;;      Totals:         6       0       0       0       0
  1358 ;;Total ram usage:        6 bytes
  1359 ;; Hardware stack levels used:    1
  1360 ;; This function calls:
  1361 ;;		Nothing
  1362 ;; This function is called by:
  1363 ;;		_sprintf
  1364 ;; This function uses a non-reentrant model
  1365 ;;
  1366                           
  1367                           
  1368                           ;psect for function ___lwmod
  1369  03FD                     ___lwmod:	
  1370  03FD                     l1349:	
  1371                           ;incstack = 0
  1372                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  1373                           
  1374  03FD  0878               	movf	___lwmod@divisor,w
  1375  03FE  0479               	iorwf	___lwmod@divisor+1,w
  1376  03FF  1903               	btfsc	3,2
  1377  0400  2C02               	goto	u851
  1378  0401  2C03               	goto	u850
  1379  0402                     u851:	
  1380  0402  2C32               	goto	l1367
  1381  0403                     u850:	
  1382  0403                     l1351:	
  1383  0403  01FD               	clrf	___lwmod@counter
  1384  0404  0AFD               	incf	___lwmod@counter,f
  1385  0405  2C11               	goto	l1357
  1386  0406                     l1353:	
  1387  0406  3001               	movlw	1
  1388  0407                     u865:	
  1389  0407  1003               	clrc
  1390  0408  0DF8               	rlf	___lwmod@divisor,f
  1391  0409  0DF9               	rlf	___lwmod@divisor+1,f
  1392  040A  3EFF               	addlw	-1
  1393  040B  1D03               	skipz
  1394  040C  2C07               	goto	u865
  1395  040D                     l1355:	
  1396  040D  3001               	movlw	1
  1397  040E  00FC               	movwf	??___lwmod
  1398  040F  087C               	movf	??___lwmod,w
  1399  0410  07FD               	addwf	___lwmod@counter,f
  1400  0411                     l1357:	
  1401  0411  1FF9               	btfss	___lwmod@divisor+1,7
  1402  0412  2C14               	goto	u871
  1403  0413  2C15               	goto	u870
  1404  0414                     u871:	
  1405  0414  2C06               	goto	l1353
  1406  0415                     u870:	
  1407  0415                     l1359:	
  1408  0415  0879               	movf	___lwmod@divisor+1,w
  1409  0416  027B               	subwf	___lwmod@dividend+1,w
  1410  0417  1D03               	skipz
  1411  0418  2C1B               	goto	u885
  1412  0419  0878               	movf	___lwmod@divisor,w
  1413  041A  027A               	subwf	___lwmod@dividend,w
  1414  041B                     u885:	
  1415  041B  1C03               	skipc
  1416  041C  2C1E               	goto	u881
  1417  041D  2C1F               	goto	u880
  1418  041E                     u881:	
  1419  041E  2C25               	goto	l1363
  1420  041F                     u880:	
  1421  041F                     l1361:	
  1422  041F  0878               	movf	___lwmod@divisor,w
  1423  0420  02FA               	subwf	___lwmod@dividend,f
  1424  0421  0879               	movf	___lwmod@divisor+1,w
  1425  0422  1C03               	skipc
  1426  0423  03FB               	decf	___lwmod@dividend+1,f
  1427  0424  02FB               	subwf	___lwmod@dividend+1,f
  1428  0425                     l1363:	
  1429  0425  3001               	movlw	1
  1430  0426                     u895:	
  1431  0426  1003               	clrc
  1432  0427  0CF9               	rrf	___lwmod@divisor+1,f
  1433  0428  0CF8               	rrf	___lwmod@divisor,f
  1434  0429  3EFF               	addlw	-1
  1435  042A  1D03               	skipz
  1436  042B  2C26               	goto	u895
  1437  042C                     l1365:	
  1438  042C  3001               	movlw	1
  1439  042D  02FD               	subwf	___lwmod@counter,f
  1440  042E  1D03               	btfss	3,2
  1441  042F  2C31               	goto	u901
  1442  0430  2C32               	goto	u900
  1443  0431                     u901:	
  1444  0431  2C15               	goto	l1359
  1445  0432                     u900:	
  1446  0432                     l1367:	
  1447  0432  087B               	movf	___lwmod@dividend+1,w
  1448  0433  00F9               	movwf	?___lwmod+1
  1449  0434  087A               	movf	___lwmod@dividend,w
  1450  0435  00F8               	movwf	?___lwmod
  1451  0436                     l629:	
  1452  0436  0008               	return
  1453  0437                     __end_of___lwmod:	
  1454                           
  1455                           	psect	text3
  1456  0475                     __ptext3:	
  1457 ;; *************** function ___lwdiv *****************
  1458 ;; Defined at:
  1459 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\lwdiv.c"
  1460 ;; Parameters:    Size  Location     Type
  1461 ;;  divisor         2    0[COMMON] unsigned int 
  1462 ;;  dividend        2    2[COMMON] unsigned int 
  1463 ;; Auto vars:     Size  Location     Type
  1464 ;;  quotient        2    5[COMMON] unsigned int 
  1465 ;;  counter         1    7[COMMON] unsigned char 
  1466 ;; Return value:  Size  Location     Type
  1467 ;;                  2    0[COMMON] unsigned int 
  1468 ;; Registers used:
  1469 ;;		wreg, status,2, status,0
  1470 ;; Tracked objects:
  1471 ;;		On entry : 0/0
  1472 ;;		On exit  : 0/0
  1473 ;;		Unchanged: 0/0
  1474 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1475 ;;      Params:         4       0       0       0       0
  1476 ;;      Locals:         3       0       0       0       0
  1477 ;;      Temps:          1       0       0       0       0
  1478 ;;      Totals:         8       0       0       0       0
  1479 ;;Total ram usage:        8 bytes
  1480 ;; Hardware stack levels used:    1
  1481 ;; This function calls:
  1482 ;;		Nothing
  1483 ;; This function is called by:
  1484 ;;		_sprintf
  1485 ;; This function uses a non-reentrant model
  1486 ;;
  1487                           
  1488                           
  1489                           ;psect for function ___lwdiv
  1490  0475                     ___lwdiv:	
  1491  0475                     l1323:	
  1492                           ;incstack = 0
  1493                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  1494                           
  1495  0475  01F5               	clrf	___lwdiv@quotient
  1496  0476  01F6               	clrf	___lwdiv@quotient+1
  1497  0477                     l1325:	
  1498  0477  0870               	movf	___lwdiv@divisor,w
  1499  0478  0471               	iorwf	___lwdiv@divisor+1,w
  1500  0479  1903               	btfsc	3,2
  1501  047A  2C7C               	goto	u781
  1502  047B  2C7D               	goto	u780
  1503  047C                     u781:	
  1504  047C  2CB4               	goto	l1345
  1505  047D                     u780:	
  1506  047D                     l1327:	
  1507  047D  01F7               	clrf	___lwdiv@counter
  1508  047E  0AF7               	incf	___lwdiv@counter,f
  1509  047F  2C8B               	goto	l1333
  1510  0480                     l1329:	
  1511  0480  3001               	movlw	1
  1512  0481                     u795:	
  1513  0481  1003               	clrc
  1514  0482  0DF0               	rlf	___lwdiv@divisor,f
  1515  0483  0DF1               	rlf	___lwdiv@divisor+1,f
  1516  0484  3EFF               	addlw	-1
  1517  0485  1D03               	skipz
  1518  0486  2C81               	goto	u795
  1519  0487                     l1331:	
  1520  0487  3001               	movlw	1
  1521  0488  00F4               	movwf	??___lwdiv
  1522  0489  0874               	movf	??___lwdiv,w
  1523  048A  07F7               	addwf	___lwdiv@counter,f
  1524  048B                     l1333:	
  1525  048B  1FF1               	btfss	___lwdiv@divisor+1,7
  1526  048C  2C8E               	goto	u801
  1527  048D  2C8F               	goto	u800
  1528  048E                     u801:	
  1529  048E  2C80               	goto	l1329
  1530  048F                     u800:	
  1531  048F                     l1335:	
  1532  048F  3001               	movlw	1
  1533  0490                     u815:	
  1534  0490  1003               	clrc
  1535  0491  0DF5               	rlf	___lwdiv@quotient,f
  1536  0492  0DF6               	rlf	___lwdiv@quotient+1,f
  1537  0493  3EFF               	addlw	-1
  1538  0494  1D03               	skipz
  1539  0495  2C90               	goto	u815
  1540  0496  0871               	movf	___lwdiv@divisor+1,w
  1541  0497  0273               	subwf	___lwdiv@dividend+1,w
  1542  0498  1D03               	skipz
  1543  0499  2C9C               	goto	u825
  1544  049A  0870               	movf	___lwdiv@divisor,w
  1545  049B  0272               	subwf	___lwdiv@dividend,w
  1546  049C                     u825:	
  1547  049C  1C03               	skipc
  1548  049D  2C9F               	goto	u821
  1549  049E  2CA0               	goto	u820
  1550  049F                     u821:	
  1551  049F  2CA7               	goto	l1341
  1552  04A0                     u820:	
  1553  04A0                     l1337:	
  1554  04A0  0870               	movf	___lwdiv@divisor,w
  1555  04A1  02F2               	subwf	___lwdiv@dividend,f
  1556  04A2  0871               	movf	___lwdiv@divisor+1,w
  1557  04A3  1C03               	skipc
  1558  04A4  03F3               	decf	___lwdiv@dividend+1,f
  1559  04A5  02F3               	subwf	___lwdiv@dividend+1,f
  1560  04A6                     l1339:	
  1561  04A6  1475               	bsf	___lwdiv@quotient,0
  1562  04A7                     l1341:	
  1563  04A7  3001               	movlw	1
  1564  04A8                     u835:	
  1565  04A8  1003               	clrc
  1566  04A9  0CF1               	rrf	___lwdiv@divisor+1,f
  1567  04AA  0CF0               	rrf	___lwdiv@divisor,f
  1568  04AB  3EFF               	addlw	-1
  1569  04AC  1D03               	skipz
  1570  04AD  2CA8               	goto	u835
  1571  04AE                     l1343:	
  1572  04AE  3001               	movlw	1
  1573  04AF  02F7               	subwf	___lwdiv@counter,f
  1574  04B0  1D03               	btfss	3,2
  1575  04B1  2CB3               	goto	u841
  1576  04B2  2CB4               	goto	u840
  1577  04B3                     u841:	
  1578  04B3  2C8F               	goto	l1335
  1579  04B4                     u840:	
  1580  04B4                     l1345:	
  1581  04B4  0876               	movf	___lwdiv@quotient+1,w
  1582  04B5  00F1               	movwf	?___lwdiv+1
  1583  04B6  0875               	movf	___lwdiv@quotient,w
  1584  04B7  00F0               	movwf	?___lwdiv
  1585  04B8                     l619:	
  1586  04B8  0008               	return
  1587  04B9                     __end_of___lwdiv:	
  1588                           
  1589                           	psect	text4
  1590  03B3                     __ptext4:	
  1591 ;; *************** function _configIO *****************
  1592 ;; Defined at:
  1593 ;;		line 67 in file "LAB3.c"
  1594 ;; Parameters:    Size  Location     Type
  1595 ;;		None
  1596 ;; Auto vars:     Size  Location     Type
  1597 ;;		None
  1598 ;; Return value:  Size  Location     Type
  1599 ;;                  1    wreg      void 
  1600 ;; Registers used:
  1601 ;;		status,2
  1602 ;; Tracked objects:
  1603 ;;		On entry : 0/0
  1604 ;;		On exit  : 0/0
  1605 ;;		Unchanged: 0/0
  1606 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1607 ;;      Params:         0       0       0       0       0
  1608 ;;      Locals:         0       0       0       0       0
  1609 ;;      Temps:          0       0       0       0       0
  1610 ;;      Totals:         0       0       0       0       0
  1611 ;;Total ram usage:        0 bytes
  1612 ;; Hardware stack levels used:    1
  1613 ;; This function calls:
  1614 ;;		Nothing
  1615 ;; This function is called by:
  1616 ;;		_main
  1617 ;; This function uses a non-reentrant model
  1618 ;;
  1619                           
  1620                           
  1621                           ;psect for function _configIO
  1622  03B3                     _configIO:	
  1623  03B3                     l1403:	
  1624                           ;incstack = 0
  1625                           ; Regs used in _configIO: [status,2]
  1626                           
  1627                           
  1628                           ;LAB3.c: 68:     TRISB=0;
  1629  03B3  1683               	bsf	3,5	;RP0=1, select bank1
  1630  03B4  1303               	bcf	3,6	;RP1=0, select bank1
  1631  03B5  0186               	clrf	6	;volatile
  1632                           
  1633                           ;LAB3.c: 69:     TRISE=0;
  1634  03B6  0189               	clrf	9	;volatile
  1635                           
  1636                           ;LAB3.c: 70:     TRISD=0;
  1637  03B7  0188               	clrf	8	;volatile
  1638                           
  1639                           ;LAB3.c: 71:     TRISA=0;
  1640  03B8  0185               	clrf	5	;volatile
  1641                           
  1642                           ;LAB3.c: 72:     ANSEL=0;
  1643  03B9  1683               	bsf	3,5	;RP0=1, select bank3
  1644  03BA  1703               	bsf	3,6	;RP1=1, select bank3
  1645  03BB  0188               	clrf	8	;volatile
  1646                           
  1647                           ;LAB3.c: 73:     ANSELH=0;
  1648  03BC  0189               	clrf	9	;volatile
  1649                           
  1650                           ;LAB3.c: 74:     PORTA=0;
  1651  03BD  1283               	bcf	3,5	;RP0=0, select bank0
  1652  03BE  1303               	bcf	3,6	;RP1=0, select bank0
  1653  03BF  0185               	clrf	5	;volatile
  1654                           
  1655                           ;LAB3.c: 75:     PORTB=0;
  1656  03C0  0186               	clrf	6	;volatile
  1657                           
  1658                           ;LAB3.c: 76:     PORTD=0;
  1659  03C1  0188               	clrf	8	;volatile
  1660                           
  1661                           ;LAB3.c: 77:     PORTE=0;
  1662  03C2  0189               	clrf	9	;volatile
  1663  03C3                     l136:	
  1664  03C3  0008               	return
  1665  03C4                     __end_of_configIO:	
  1666                           
  1667                           	psect	text5
  1668  039D                     __ptext5:	
  1669 ;; *************** function _configADC *****************
  1670 ;; Defined at:
  1671 ;;		line 8 in file "../../IE3027-LAB2/LAB2.X/ADC.c"
  1672 ;; Parameters:    Size  Location     Type
  1673 ;;		None
  1674 ;; Auto vars:     Size  Location     Type
  1675 ;;		None
  1676 ;; Return value:  Size  Location     Type
  1677 ;;                  1    wreg      void 
  1678 ;; Registers used:
  1679 ;;		wreg, status,2, status,0
  1680 ;; Tracked objects:
  1681 ;;		On entry : 0/0
  1682 ;;		On exit  : 0/0
  1683 ;;		Unchanged: 0/0
  1684 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1685 ;;      Params:         0       0       0       0       0
  1686 ;;      Locals:         0       0       0       0       0
  1687 ;;      Temps:          0       0       0       0       0
  1688 ;;      Totals:         0       0       0       0       0
  1689 ;;Total ram usage:        0 bytes
  1690 ;; Hardware stack levels used:    1
  1691 ;; This function calls:
  1692 ;;		Nothing
  1693 ;; This function is called by:
  1694 ;;		_main
  1695 ;; This function uses a non-reentrant model
  1696 ;;
  1697                           
  1698                           
  1699                           ;psect for function _configADC
  1700  039D                     _configADC:	
  1701  039D                     l1405:	
  1702                           ;incstack = 0
  1703                           ; Regs used in _configADC: [wreg+status,2+status,0]
  1704                           
  1705                           
  1706                           ;../../IE3027-LAB2/LAB2.X/ADC.c: 9:     ADCON0bits.ADCS=1;
  1707  039D  1283               	bcf	3,5	;RP0=0, select bank0
  1708  039E  1303               	bcf	3,6	;RP1=0, select bank0
  1709  039F  081F               	movf	31,w	;volatile
  1710  03A0  393F               	andlw	-193
  1711  03A1  3840               	iorlw	64
  1712  03A2  009F               	movwf	31	;volatile
  1713  03A3                     l1407:	
  1714                           
  1715                           ;../../IE3027-LAB2/LAB2.X/ADC.c: 10:     ADCON1=0;
  1716  03A3  1683               	bsf	3,5	;RP0=1, select bank1
  1717  03A4  1303               	bcf	3,6	;RP1=0, select bank1
  1718  03A5  019F               	clrf	31	;volatile
  1719  03A6                     l157:	
  1720  03A6  0008               	return
  1721  03A7                     __end_of_configADC:	
  1722                           
  1723                           	psect	text6
  1724  03DB                     __ptext6:	
  1725 ;; *************** function _Write_USART_String *****************
  1726 ;; Defined at:
  1727 ;;		line 34 in file "USART.c"
  1728 ;; Parameters:    Size  Location     Type
  1729 ;;  a               1    wreg     PTR unsigned char 
  1730 ;;		 -> STR_2(26), 
  1731 ;; Auto vars:     Size  Location     Type
  1732 ;;  a               1    2[COMMON] PTR unsigned char 
  1733 ;;		 -> STR_2(26), 
  1734 ;;  i               1    3[COMMON] unsigned char 
  1735 ;; Return value:  Size  Location     Type
  1736 ;;                  1    wreg      void 
  1737 ;; Registers used:
  1738 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1739 ;; Tracked objects:
  1740 ;;		On entry : 0/0
  1741 ;;		On exit  : 0/0
  1742 ;;		Unchanged: 0/0
  1743 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1744 ;;      Params:         0       0       0       0       0
  1745 ;;      Locals:         2       0       0       0       0
  1746 ;;      Temps:          1       0       0       0       0
  1747 ;;      Totals:         3       0       0       0       0
  1748 ;;Total ram usage:        3 bytes
  1749 ;; Hardware stack levels used:    1
  1750 ;; Hardware stack levels required when called:    1
  1751 ;; This function calls:
  1752 ;;		_Write_USART
  1753 ;; This function is called by:
  1754 ;;		_main
  1755 ;; This function uses a non-reentrant model
  1756 ;;
  1757                           
  1758                           
  1759                           ;psect for function _Write_USART_String
  1760  03DB                     _Write_USART_String:	
  1761                           
  1762                           ;incstack = 0
  1763                           ; Regs used in _Write_USART_String: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1764                           ;Write_USART_String@a stored from wreg
  1765  03DB  00F2               	movwf	Write_USART_String@a
  1766  03DC                     l1503:	
  1767                           
  1768                           ;USART.c: 35:     uint8_t i;;USART.c: 36:     for(i=0;a[i]!='\0';i++){
  1769  03DC  01F3               	clrf	Write_USART_String@i
  1770  03DD  2BEF               	goto	l1509
  1771  03DE                     l1505:	
  1772                           
  1773                           ;USART.c: 37:         Write_USART(a[i]);
  1774  03DE  0873               	movf	Write_USART_String@i,w
  1775  03DF  0772               	addwf	Write_USART_String@a,w
  1776  03E0  0084               	movwf	4
  1777  03E1  120A  118A  2003  120A  118A  	fcall	stringdir
  1778  03E6  120A  118A  23A7  120A  118A  	fcall	_Write_USART
  1779  03EB                     l1507:	
  1780                           
  1781                           ;USART.c: 38:     }
  1782  03EB  3001               	movlw	1
  1783  03EC  00F1               	movwf	??_Write_USART_String
  1784  03ED  0871               	movf	??_Write_USART_String,w
  1785  03EE  07F3               	addwf	Write_USART_String@i,f
  1786  03EF                     l1509:	
  1787  03EF  0873               	movf	Write_USART_String@i,w
  1788  03F0  0772               	addwf	Write_USART_String@a,w
  1789  03F1  0084               	movwf	4
  1790  03F2  120A  118A  2003  120A  118A  	fcall	stringdir
  1791  03F7  3A00               	xorlw	0
  1792  03F8  1D03               	skipz
  1793  03F9  2BFB               	goto	u1081
  1794  03FA  2BFC               	goto	u1080
  1795  03FB                     u1081:	
  1796  03FB  2BDE               	goto	l1505
  1797  03FC                     u1080:	
  1798  03FC                     l221:	
  1799  03FC  0008               	return
  1800  03FD                     __end_of_Write_USART_String:	
  1801                           
  1802                           	psect	text7
  1803  03A7                     __ptext7:	
  1804 ;; *************** function _Write_USART *****************
  1805 ;; Defined at:
  1806 ;;		line 30 in file "USART.c"
  1807 ;; Parameters:    Size  Location     Type
  1808 ;;  x               1    wreg     unsigned char 
  1809 ;; Auto vars:     Size  Location     Type
  1810 ;;  x               1    0[COMMON] unsigned char 
  1811 ;; Return value:  Size  Location     Type
  1812 ;;                  1    wreg      void 
  1813 ;; Registers used:
  1814 ;;		wreg
  1815 ;; Tracked objects:
  1816 ;;		On entry : 0/0
  1817 ;;		On exit  : 0/0
  1818 ;;		Unchanged: 0/0
  1819 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1820 ;;      Params:         0       0       0       0       0
  1821 ;;      Locals:         1       0       0       0       0
  1822 ;;      Temps:          0       0       0       0       0
  1823 ;;      Totals:         1       0       0       0       0
  1824 ;;Total ram usage:        1 bytes
  1825 ;; Hardware stack levels used:    1
  1826 ;; This function calls:
  1827 ;;		Nothing
  1828 ;; This function is called by:
  1829 ;;		_main
  1830 ;;		_Write_USART_String
  1831 ;; This function uses a non-reentrant model
  1832 ;;
  1833                           
  1834                           
  1835                           ;psect for function _Write_USART
  1836  03A7                     _Write_USART:	
  1837                           
  1838                           ;incstack = 0
  1839                           ; Regs used in _Write_USART: [wreg]
  1840                           ;Write_USART@x stored from wreg
  1841  03A7  00F0               	movwf	Write_USART@x
  1842  03A8                     l1279:	
  1843  03A8                     l212:	
  1844                           ;USART.c: 31:     while(!TRMT);
  1845                           
  1846  03A8  1683               	bsf	3,5	;RP0=1, select bank1
  1847  03A9  1303               	bcf	3,6	;RP1=0, select bank1
  1848  03AA  1C98               	btfss	24,1	;volatile
  1849  03AB  2BAD               	goto	u671
  1850  03AC  2BAE               	goto	u670
  1851  03AD                     u671:	
  1852  03AD  2BA8               	goto	l212
  1853  03AE                     u670:	
  1854  03AE                     l1281:	
  1855                           
  1856                           ;USART.c: 32:     TXREG=x;
  1857  03AE  0870               	movf	Write_USART@x,w
  1858  03AF  1283               	bcf	3,5	;RP0=0, select bank0
  1859  03B0  1303               	bcf	3,6	;RP1=0, select bank0
  1860  03B1  0099               	movwf	25	;volatile
  1861  03B2                     l215:	
  1862  03B2  0008               	return
  1863  03B3                     __end_of_Write_USART:	
  1864                           
  1865                           	psect	text8
  1866  062E                     __ptext8:	
  1867 ;; *************** function _USART_Init *****************
  1868 ;; Defined at:
  1869 ;;		line 9 in file "USART.c"
  1870 ;; Parameters:    Size  Location     Type
  1871 ;;  baudrate        4    6[BANK0 ] const long 
  1872 ;; Auto vars:     Size  Location     Type
  1873 ;;  x               2    9[COMMON] unsigned int 
  1874 ;; Return value:  Size  Location     Type
  1875 ;;                  1    wreg      unsigned char 
  1876 ;; Registers used:
  1877 ;;		wreg, status,2, status,0, pclath, cstack
  1878 ;; Tracked objects:
  1879 ;;		On entry : 0/0
  1880 ;;		On exit  : 0/0
  1881 ;;		Unchanged: 0/0
  1882 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1883 ;;      Params:         0       4       0       0       0
  1884 ;;      Locals:         2       0       0       0       0
  1885 ;;      Temps:          0      12       0       0       0
  1886 ;;      Totals:         2      16       0       0       0
  1887 ;;Total ram usage:       18 bytes
  1888 ;; Hardware stack levels used:    1
  1889 ;; Hardware stack levels required when called:    1
  1890 ;; This function calls:
  1891 ;;		___aldiv
  1892 ;; This function is called by:
  1893 ;;		_main
  1894 ;; This function uses a non-reentrant model
  1895 ;;
  1896                           
  1897                           
  1898                           ;psect for function _USART_Init
  1899  062E                     _USART_Init:	
  1900  062E                     l1409:	
  1901                           ;incstack = 0
  1902                           ; Regs used in _USART_Init: [wreg+status,2+status,0+pclath+cstack]
  1903                           
  1904                           
  1905                           ;USART.c: 10:   unsigned int x;;USART.c: 11:   x = (4000000 - baudrate*64)/(baudrate*64)
      +                          ;
  1906  062E  1283               	bcf	3,5	;RP0=0, select bank0
  1907  062F  1303               	bcf	3,6	;RP1=0, select bank0
  1908  0630  0826               	movf	USART_Init@baudrate,w
  1909  0631  00AA               	movwf	??_USART_Init
  1910  0632  0827               	movf	USART_Init@baudrate+1,w
  1911  0633  00AB               	movwf	??_USART_Init+1
  1912  0634  0828               	movf	USART_Init@baudrate+2,w
  1913  0635  00AC               	movwf	??_USART_Init+2
  1914  0636  0829               	movf	USART_Init@baudrate+3,w
  1915  0637  00AD               	movwf	??_USART_Init+3
  1916  0638  3006               	movlw	6
  1917  0639                     u925:	
  1918  0639  1003               	clrc
  1919  063A  0DAA               	rlf	??_USART_Init,f
  1920  063B  0DAB               	rlf	??_USART_Init+1,f
  1921  063C  0DAC               	rlf	??_USART_Init+2,f
  1922  063D  0DAD               	rlf	??_USART_Init+3,f
  1923  063E                     u920:	
  1924  063E  3EFF               	addlw	-1
  1925  063F  1D03               	skipz
  1926  0640  2E39               	goto	u925
  1927  0641  082D               	movf	??_USART_Init+3,w
  1928  0642  00F3               	movwf	___aldiv@divisor+3
  1929  0643  082C               	movf	??_USART_Init+2,w
  1930  0644  00F2               	movwf	___aldiv@divisor+2
  1931  0645  082B               	movf	??_USART_Init+1,w
  1932  0646  00F1               	movwf	___aldiv@divisor+1
  1933  0647  082A               	movf	??_USART_Init,w
  1934  0648  00F0               	movwf	___aldiv@divisor
  1935  0649  0826               	movf	USART_Init@baudrate,w
  1936  064A  00AE               	movwf	??_USART_Init+4
  1937  064B  0827               	movf	USART_Init@baudrate+1,w
  1938  064C  00AF               	movwf	??_USART_Init+5
  1939  064D  0828               	movf	USART_Init@baudrate+2,w
  1940  064E  00B0               	movwf	??_USART_Init+6
  1941  064F  0829               	movf	USART_Init@baudrate+3,w
  1942  0650  00B1               	movwf	??_USART_Init+7
  1943  0651  3006               	movlw	6
  1944  0652                     u935:	
  1945  0652  1003               	clrc
  1946  0653  0DAE               	rlf	??_USART_Init+4,f
  1947  0654  0DAF               	rlf	??_USART_Init+5,f
  1948  0655  0DB0               	rlf	??_USART_Init+6,f
  1949  0656  0DB1               	rlf	??_USART_Init+7,f
  1950  0657                     u930:	
  1951  0657  3EFF               	addlw	-1
  1952  0658  1D03               	skipz
  1953  0659  2E52               	goto	u935
  1954  065A  3000               	movlw	0
  1955  065B  00B2               	movwf	??_USART_Init+8
  1956  065C  3009               	movlw	9
  1957  065D  00B3               	movwf	??_USART_Init+9
  1958  065E  303D               	movlw	61
  1959  065F  00B4               	movwf	??_USART_Init+10
  1960  0660  3000               	movlw	0
  1961  0661  00B5               	movwf	??_USART_Init+11
  1962  0662  082E               	movf	??_USART_Init+4,w
  1963  0663  02B2               	subwf	??_USART_Init+8,f
  1964  0664  082F               	movf	??_USART_Init+5,w
  1965  0665  1C03               	skipc
  1966  0666  0F2F               	incfsz	??_USART_Init+5,w
  1967  0667  2E69               	goto	u941
  1968  0668  2E6A               	goto	u942
  1969  0669                     u941:	
  1970  0669  02B3               	subwf	??_USART_Init+9,f
  1971  066A                     u942:	
  1972  066A  0830               	movf	??_USART_Init+6,w
  1973  066B  1C03               	skipc
  1974  066C  0F30               	incfsz	??_USART_Init+6,w
  1975  066D  2E6F               	goto	u943
  1976  066E  2E70               	goto	u944
  1977  066F                     u943:	
  1978  066F  02B4               	subwf	??_USART_Init+10,f
  1979  0670                     u944:	
  1980  0670  0831               	movf	??_USART_Init+7,w
  1981  0671  1C03               	skipc
  1982  0672  0F31               	incfsz	??_USART_Init+7,w
  1983  0673  2E75               	goto	u945
  1984  0674  2E76               	goto	u946
  1985  0675                     u945:	
  1986  0675  02B5               	subwf	??_USART_Init+11,f
  1987  0676                     u946:	
  1988  0676  0835               	movf	??_USART_Init+11,w
  1989  0677  00F7               	movwf	___aldiv@dividend+3
  1990  0678  0834               	movf	??_USART_Init+10,w
  1991  0679  00F6               	movwf	___aldiv@dividend+2
  1992  067A  0833               	movf	??_USART_Init+9,w
  1993  067B  00F5               	movwf	___aldiv@dividend+1
  1994  067C  0832               	movf	??_USART_Init+8,w
  1995  067D  00F4               	movwf	___aldiv@dividend
  1996  067E  120A  118A  2591  120A  118A  	fcall	___aldiv
  1997  0683  0871               	movf	?___aldiv+1,w
  1998  0684  00FA               	movwf	USART_Init@x+1
  1999  0685  0870               	movf	?___aldiv,w
  2000  0686  00F9               	movwf	USART_Init@x
  2001  0687                     l1411:	
  2002                           
  2003                           ;USART.c: 12:   if(x>255)
  2004  0687  3001               	movlw	1
  2005  0688  027A               	subwf	USART_Init@x+1,w
  2006  0689  3000               	movlw	0
  2007  068A  1903               	skipnz
  2008  068B  0279               	subwf	USART_Init@x,w
  2009  068C  1C03               	skipc
  2010  068D  2E8F               	goto	u951
  2011  068E  2E90               	goto	u950
  2012  068F                     u951:	
  2013  068F  2EEC               	goto	l1417
  2014  0690                     u950:	
  2015  0690                     l1413:	
  2016                           
  2017                           ;USART.c: 13:   {;USART.c: 14:     x = (4000000 - baudrate*16)/(baudrate*16);
  2018  0690  1283               	bcf	3,5	;RP0=0, select bank0
  2019  0691  1303               	bcf	3,6	;RP1=0, select bank0
  2020  0692  0826               	movf	USART_Init@baudrate,w
  2021  0693  00AA               	movwf	??_USART_Init
  2022  0694  0827               	movf	USART_Init@baudrate+1,w
  2023  0695  00AB               	movwf	??_USART_Init+1
  2024  0696  0828               	movf	USART_Init@baudrate+2,w
  2025  0697  00AC               	movwf	??_USART_Init+2
  2026  0698  0829               	movf	USART_Init@baudrate+3,w
  2027  0699  00AD               	movwf	??_USART_Init+3
  2028  069A  3004               	movlw	4
  2029  069B                     u965:	
  2030  069B  1003               	clrc
  2031  069C  0DAA               	rlf	??_USART_Init,f
  2032  069D  0DAB               	rlf	??_USART_Init+1,f
  2033  069E  0DAC               	rlf	??_USART_Init+2,f
  2034  069F  0DAD               	rlf	??_USART_Init+3,f
  2035  06A0                     u960:	
  2036  06A0  3EFF               	addlw	-1
  2037  06A1  1D03               	skipz
  2038  06A2  2E9B               	goto	u965
  2039  06A3  082D               	movf	??_USART_Init+3,w
  2040  06A4  00F3               	movwf	___aldiv@divisor+3
  2041  06A5  082C               	movf	??_USART_Init+2,w
  2042  06A6  00F2               	movwf	___aldiv@divisor+2
  2043  06A7  082B               	movf	??_USART_Init+1,w
  2044  06A8  00F1               	movwf	___aldiv@divisor+1
  2045  06A9  082A               	movf	??_USART_Init,w
  2046  06AA  00F0               	movwf	___aldiv@divisor
  2047  06AB  0826               	movf	USART_Init@baudrate,w
  2048  06AC  00AE               	movwf	??_USART_Init+4
  2049  06AD  0827               	movf	USART_Init@baudrate+1,w
  2050  06AE  00AF               	movwf	??_USART_Init+5
  2051  06AF  0828               	movf	USART_Init@baudrate+2,w
  2052  06B0  00B0               	movwf	??_USART_Init+6
  2053  06B1  0829               	movf	USART_Init@baudrate+3,w
  2054  06B2  00B1               	movwf	??_USART_Init+7
  2055  06B3  3004               	movlw	4
  2056  06B4                     u975:	
  2057  06B4  1003               	clrc
  2058  06B5  0DAE               	rlf	??_USART_Init+4,f
  2059  06B6  0DAF               	rlf	??_USART_Init+5,f
  2060  06B7  0DB0               	rlf	??_USART_Init+6,f
  2061  06B8  0DB1               	rlf	??_USART_Init+7,f
  2062  06B9                     u970:	
  2063  06B9  3EFF               	addlw	-1
  2064  06BA  1D03               	skipz
  2065  06BB  2EB4               	goto	u975
  2066  06BC  3000               	movlw	0
  2067  06BD  00B2               	movwf	??_USART_Init+8
  2068  06BE  3009               	movlw	9
  2069  06BF  00B3               	movwf	??_USART_Init+9
  2070  06C0  303D               	movlw	61
  2071  06C1  00B4               	movwf	??_USART_Init+10
  2072  06C2  3000               	movlw	0
  2073  06C3  00B5               	movwf	??_USART_Init+11
  2074  06C4  082E               	movf	??_USART_Init+4,w
  2075  06C5  02B2               	subwf	??_USART_Init+8,f
  2076  06C6  082F               	movf	??_USART_Init+5,w
  2077  06C7  1C03               	skipc
  2078  06C8  0F2F               	incfsz	??_USART_Init+5,w
  2079  06C9  2ECB               	goto	u981
  2080  06CA  2ECC               	goto	u982
  2081  06CB                     u981:	
  2082  06CB  02B3               	subwf	??_USART_Init+9,f
  2083  06CC                     u982:	
  2084  06CC  0830               	movf	??_USART_Init+6,w
  2085  06CD  1C03               	skipc
  2086  06CE  0F30               	incfsz	??_USART_Init+6,w
  2087  06CF  2ED1               	goto	u983
  2088  06D0  2ED2               	goto	u984
  2089  06D1                     u983:	
  2090  06D1  02B4               	subwf	??_USART_Init+10,f
  2091  06D2                     u984:	
  2092  06D2  0831               	movf	??_USART_Init+7,w
  2093  06D3  1C03               	skipc
  2094  06D4  0F31               	incfsz	??_USART_Init+7,w
  2095  06D5  2ED7               	goto	u985
  2096  06D6  2ED8               	goto	u986
  2097  06D7                     u985:	
  2098  06D7  02B5               	subwf	??_USART_Init+11,f
  2099  06D8                     u986:	
  2100  06D8  0835               	movf	??_USART_Init+11,w
  2101  06D9  00F7               	movwf	___aldiv@dividend+3
  2102  06DA  0834               	movf	??_USART_Init+10,w
  2103  06DB  00F6               	movwf	___aldiv@dividend+2
  2104  06DC  0833               	movf	??_USART_Init+9,w
  2105  06DD  00F5               	movwf	___aldiv@dividend+1
  2106  06DE  0832               	movf	??_USART_Init+8,w
  2107  06DF  00F4               	movwf	___aldiv@dividend
  2108  06E0  120A  118A  2591  120A  118A  	fcall	___aldiv
  2109  06E5  0871               	movf	?___aldiv+1,w
  2110  06E6  00FA               	movwf	USART_Init@x+1
  2111  06E7  0870               	movf	?___aldiv,w
  2112  06E8  00F9               	movwf	USART_Init@x
  2113  06E9                     l1415:	
  2114                           
  2115                           ;USART.c: 15:     BRGH = 1;
  2116  06E9  1683               	bsf	3,5	;RP0=1, select bank1
  2117  06EA  1303               	bcf	3,6	;RP1=0, select bank1
  2118  06EB  1518               	bsf	24,2	;volatile
  2119  06EC                     l1417:	
  2120                           
  2121                           ;USART.c: 17:   if(x<256)
  2122  06EC  3001               	movlw	1
  2123  06ED  027A               	subwf	USART_Init@x+1,w
  2124  06EE  3000               	movlw	0
  2125  06EF  1903               	skipnz
  2126  06F0  0279               	subwf	USART_Init@x,w
  2127  06F1  1803               	skipnc
  2128  06F2  2EF4               	goto	u991
  2129  06F3  2EF5               	goto	u990
  2130  06F4                     u991:	
  2131  06F4  2F07               	goto	l209
  2132  06F5                     u990:	
  2133  06F5                     l1419:	
  2134                           
  2135                           ;USART.c: 18:   {;USART.c: 19:     SPBRG = x;
  2136  06F5  0879               	movf	USART_Init@x,w
  2137  06F6  1683               	bsf	3,5	;RP0=1, select bank1
  2138  06F7  1303               	bcf	3,6	;RP1=0, select bank1
  2139  06F8  0099               	movwf	25	;volatile
  2140  06F9                     l1421:	
  2141                           
  2142                           ;USART.c: 20:     SYNC = 0;
  2143  06F9  1218               	bcf	24,4	;volatile
  2144  06FA                     l1423:	
  2145                           
  2146                           ;USART.c: 21:     SPEN = 1;
  2147  06FA  1283               	bcf	3,5	;RP0=0, select bank0
  2148  06FB  1303               	bcf	3,6	;RP1=0, select bank0
  2149  06FC  1798               	bsf	24,7	;volatile
  2150  06FD                     l1425:	
  2151                           
  2152                           ;USART.c: 22:     TRISC7 = 1;
  2153  06FD  1683               	bsf	3,5	;RP0=1, select bank1
  2154  06FE  1303               	bcf	3,6	;RP1=0, select bank1
  2155  06FF  1787               	bsf	7,7	;volatile
  2156  0700                     l1427:	
  2157                           
  2158                           ;USART.c: 23:     TRISC6 = 0;
  2159  0700  1307               	bcf	7,6	;volatile
  2160  0701                     l1429:	
  2161                           
  2162                           ;USART.c: 24:     CREN = 1;
  2163  0701  1283               	bcf	3,5	;RP0=0, select bank0
  2164  0702  1303               	bcf	3,6	;RP1=0, select bank0
  2165  0703  1618               	bsf	24,4	;volatile
  2166  0704                     l1431:	
  2167                           
  2168                           ;USART.c: 25:     TXEN = 1;
  2169  0704  1683               	bsf	3,5	;RP0=1, select bank1
  2170  0705  1303               	bcf	3,6	;RP1=0, select bank1
  2171  0706  1698               	bsf	24,5	;volatile
  2172  0707                     l209:	
  2173  0707  0008               	return
  2174  0708                     __end_of_USART_Init:	
  2175                           
  2176                           	psect	text9
  2177  0591                     __ptext9:	
  2178 ;; *************** function ___aldiv *****************
  2179 ;; Defined at:
  2180 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\aldiv.c"
  2181 ;; Parameters:    Size  Location     Type
  2182 ;;  divisor         4    0[COMMON] long 
  2183 ;;  dividend        4    4[COMMON] long 
  2184 ;; Auto vars:     Size  Location     Type
  2185 ;;  quotient        4    2[BANK0 ] long 
  2186 ;;  sign            1    1[BANK0 ] unsigned char 
  2187 ;;  counter         1    0[BANK0 ] unsigned char 
  2188 ;; Return value:  Size  Location     Type
  2189 ;;                  4    0[COMMON] long 
  2190 ;; Registers used:
  2191 ;;		wreg, status,2, status,0
  2192 ;; Tracked objects:
  2193 ;;		On entry : 0/0
  2194 ;;		On exit  : 0/0
  2195 ;;		Unchanged: 0/0
  2196 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2197 ;;      Params:         8       0       0       0       0
  2198 ;;      Locals:         0       6       0       0       0
  2199 ;;      Temps:          1       0       0       0       0
  2200 ;;      Totals:         9       6       0       0       0
  2201 ;;Total ram usage:       15 bytes
  2202 ;; Hardware stack levels used:    1
  2203 ;; This function calls:
  2204 ;;		Nothing
  2205 ;; This function is called by:
  2206 ;;		_USART_Init
  2207 ;; This function uses a non-reentrant model
  2208 ;;
  2209                           
  2210                           
  2211                           ;psect for function ___aldiv
  2212  0591                     ___aldiv:	
  2213  0591                     l1283:	
  2214                           ;incstack = 0
  2215                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  2216                           
  2217  0591  1283               	bcf	3,5	;RP0=0, select bank0
  2218  0592  1303               	bcf	3,6	;RP1=0, select bank0
  2219  0593  01A1               	clrf	___aldiv@sign
  2220  0594                     l1285:	
  2221  0594  1FF3               	btfss	___aldiv@divisor+3,7
  2222  0595  2D97               	goto	u681
  2223  0596  2D98               	goto	u680
  2224  0597                     u681:	
  2225  0597  2DA5               	goto	l412
  2226  0598                     u680:	
  2227  0598                     l1287:	
  2228  0598  09F0               	comf	___aldiv@divisor,f
  2229  0599  09F1               	comf	___aldiv@divisor+1,f
  2230  059A  09F2               	comf	___aldiv@divisor+2,f
  2231  059B  09F3               	comf	___aldiv@divisor+3,f
  2232  059C  0AF0               	incf	___aldiv@divisor,f
  2233  059D  1903               	skipnz
  2234  059E  0AF1               	incf	___aldiv@divisor+1,f
  2235  059F  1903               	skipnz
  2236  05A0  0AF2               	incf	___aldiv@divisor+2,f
  2237  05A1  1903               	skipnz
  2238  05A2  0AF3               	incf	___aldiv@divisor+3,f
  2239  05A3  01A1               	clrf	___aldiv@sign
  2240  05A4  0AA1               	incf	___aldiv@sign,f
  2241  05A5                     l412:	
  2242  05A5  1FF7               	btfss	___aldiv@dividend+3,7
  2243  05A6  2DA8               	goto	u691
  2244  05A7  2DA9               	goto	u690
  2245  05A8                     u691:	
  2246  05A8  2DB8               	goto	l1293
  2247  05A9                     u690:	
  2248  05A9                     l1289:	
  2249  05A9  09F4               	comf	___aldiv@dividend,f
  2250  05AA  09F5               	comf	___aldiv@dividend+1,f
  2251  05AB  09F6               	comf	___aldiv@dividend+2,f
  2252  05AC  09F7               	comf	___aldiv@dividend+3,f
  2253  05AD  0AF4               	incf	___aldiv@dividend,f
  2254  05AE  1903               	skipnz
  2255  05AF  0AF5               	incf	___aldiv@dividend+1,f
  2256  05B0  1903               	skipnz
  2257  05B1  0AF6               	incf	___aldiv@dividend+2,f
  2258  05B2  1903               	skipnz
  2259  05B3  0AF7               	incf	___aldiv@dividend+3,f
  2260  05B4                     l1291:	
  2261  05B4  3001               	movlw	1
  2262  05B5  00F8               	movwf	??___aldiv
  2263  05B6  0878               	movf	??___aldiv,w
  2264  05B7  06A1               	xorwf	___aldiv@sign,f
  2265  05B8                     l1293:	
  2266  05B8  3000               	movlw	0
  2267  05B9  00A5               	movwf	___aldiv@quotient+3
  2268  05BA  3000               	movlw	0
  2269  05BB  00A4               	movwf	___aldiv@quotient+2
  2270  05BC  3000               	movlw	0
  2271  05BD  00A3               	movwf	___aldiv@quotient+1
  2272  05BE  3000               	movlw	0
  2273  05BF  00A2               	movwf	___aldiv@quotient
  2274  05C0                     l1295:	
  2275  05C0  0873               	movf	___aldiv@divisor+3,w
  2276  05C1  0472               	iorwf	___aldiv@divisor+2,w
  2277  05C2  0471               	iorwf	___aldiv@divisor+1,w
  2278  05C3  0470               	iorwf	___aldiv@divisor,w
  2279  05C4  1903               	skipnz
  2280  05C5  2DC7               	goto	u701
  2281  05C6  2DC8               	goto	u700
  2282  05C7                     u701:	
  2283  05C7  2E15               	goto	l1315
  2284  05C8                     u700:	
  2285  05C8                     l1297:	
  2286  05C8  01A0               	clrf	___aldiv@counter
  2287  05C9  0AA0               	incf	___aldiv@counter,f
  2288  05CA  2DD8               	goto	l1301
  2289  05CB                     l1299:	
  2290  05CB  3001               	movlw	1
  2291  05CC  00F8               	movwf	??___aldiv
  2292  05CD                     u715:	
  2293  05CD  1003               	clrc
  2294  05CE  0DF0               	rlf	___aldiv@divisor,f
  2295  05CF  0DF1               	rlf	___aldiv@divisor+1,f
  2296  05D0  0DF2               	rlf	___aldiv@divisor+2,f
  2297  05D1  0DF3               	rlf	___aldiv@divisor+3,f
  2298  05D2  0BF8               	decfsz	??___aldiv,f
  2299  05D3  2DCD               	goto	u715
  2300  05D4  3001               	movlw	1
  2301  05D5  00F8               	movwf	??___aldiv
  2302  05D6  0878               	movf	??___aldiv,w
  2303  05D7  07A0               	addwf	___aldiv@counter,f
  2304  05D8                     l1301:	
  2305  05D8  1FF3               	btfss	___aldiv@divisor+3,7
  2306  05D9  2DDB               	goto	u721
  2307  05DA  2DDC               	goto	u720
  2308  05DB                     u721:	
  2309  05DB  2DCB               	goto	l1299
  2310  05DC                     u720:	
  2311  05DC                     l1303:	
  2312  05DC  3001               	movlw	1
  2313  05DD  00F8               	movwf	??___aldiv
  2314  05DE                     u735:	
  2315  05DE  1003               	clrc
  2316  05DF  0DA2               	rlf	___aldiv@quotient,f
  2317  05E0  0DA3               	rlf	___aldiv@quotient+1,f
  2318  05E1  0DA4               	rlf	___aldiv@quotient+2,f
  2319  05E2  0DA5               	rlf	___aldiv@quotient+3,f
  2320  05E3  0BF8               	decfsz	??___aldiv,f
  2321  05E4  2DDE               	goto	u735
  2322  05E5                     l1305:	
  2323  05E5  0873               	movf	___aldiv@divisor+3,w
  2324  05E6  0277               	subwf	___aldiv@dividend+3,w
  2325  05E7  1D03               	skipz
  2326  05E8  2DF3               	goto	u745
  2327  05E9  0872               	movf	___aldiv@divisor+2,w
  2328  05EA  0276               	subwf	___aldiv@dividend+2,w
  2329  05EB  1D03               	skipz
  2330  05EC  2DF3               	goto	u745
  2331  05ED  0871               	movf	___aldiv@divisor+1,w
  2332  05EE  0275               	subwf	___aldiv@dividend+1,w
  2333  05EF  1D03               	skipz
  2334  05F0  2DF3               	goto	u745
  2335  05F1  0870               	movf	___aldiv@divisor,w
  2336  05F2  0274               	subwf	___aldiv@dividend,w
  2337  05F3                     u745:	
  2338  05F3  1C03               	skipc
  2339  05F4  2DF6               	goto	u741
  2340  05F5  2DF7               	goto	u740
  2341  05F6                     u741:	
  2342  05F6  2E06               	goto	l1311
  2343  05F7                     u740:	
  2344  05F7                     l1307:	
  2345  05F7  0870               	movf	___aldiv@divisor,w
  2346  05F8  02F4               	subwf	___aldiv@dividend,f
  2347  05F9  0871               	movf	___aldiv@divisor+1,w
  2348  05FA  1C03               	skipc
  2349  05FB  0F71               	incfsz	___aldiv@divisor+1,w
  2350  05FC  02F5               	subwf	___aldiv@dividend+1,f
  2351  05FD  0872               	movf	___aldiv@divisor+2,w
  2352  05FE  1C03               	skipc
  2353  05FF  0F72               	incfsz	___aldiv@divisor+2,w
  2354  0600  02F6               	subwf	___aldiv@dividend+2,f
  2355  0601  0873               	movf	___aldiv@divisor+3,w
  2356  0602  1C03               	skipc
  2357  0603  0F73               	incfsz	___aldiv@divisor+3,w
  2358  0604  02F7               	subwf	___aldiv@dividend+3,f
  2359  0605                     l1309:	
  2360  0605  1422               	bsf	___aldiv@quotient,0
  2361  0606                     l1311:	
  2362  0606  3001               	movlw	1
  2363  0607                     u755:	
  2364  0607  1003               	clrc
  2365  0608  0CF3               	rrf	___aldiv@divisor+3,f
  2366  0609  0CF2               	rrf	___aldiv@divisor+2,f
  2367  060A  0CF1               	rrf	___aldiv@divisor+1,f
  2368  060B  0CF0               	rrf	___aldiv@divisor,f
  2369  060C  3EFF               	addlw	-1
  2370  060D  1D03               	skipz
  2371  060E  2E07               	goto	u755
  2372  060F                     l1313:	
  2373  060F  3001               	movlw	1
  2374  0610  02A0               	subwf	___aldiv@counter,f
  2375  0611  1D03               	btfss	3,2
  2376  0612  2E14               	goto	u761
  2377  0613  2E15               	goto	u760
  2378  0614                     u761:	
  2379  0614  2DDC               	goto	l1303
  2380  0615                     u760:	
  2381  0615                     l1315:	
  2382  0615  0821               	movf	___aldiv@sign,w
  2383  0616  1903               	btfsc	3,2
  2384  0617  2E19               	goto	u771
  2385  0618  2E1A               	goto	u770
  2386  0619                     u771:	
  2387  0619  2E25               	goto	l1319
  2388  061A                     u770:	
  2389  061A                     l1317:	
  2390  061A  09A2               	comf	___aldiv@quotient,f
  2391  061B  09A3               	comf	___aldiv@quotient+1,f
  2392  061C  09A4               	comf	___aldiv@quotient+2,f
  2393  061D  09A5               	comf	___aldiv@quotient+3,f
  2394  061E  0AA2               	incf	___aldiv@quotient,f
  2395  061F  1903               	skipnz
  2396  0620  0AA3               	incf	___aldiv@quotient+1,f
  2397  0621  1903               	skipnz
  2398  0622  0AA4               	incf	___aldiv@quotient+2,f
  2399  0623  1903               	skipnz
  2400  0624  0AA5               	incf	___aldiv@quotient+3,f
  2401  0625                     l1319:	
  2402  0625  0825               	movf	___aldiv@quotient+3,w
  2403  0626  00F3               	movwf	?___aldiv+3
  2404  0627  0824               	movf	___aldiv@quotient+2,w
  2405  0628  00F2               	movwf	?___aldiv+2
  2406  0629  0823               	movf	___aldiv@quotient+1,w
  2407  062A  00F1               	movwf	?___aldiv+1
  2408  062B  0822               	movf	___aldiv@quotient,w
  2409  062C  00F0               	movwf	?___aldiv
  2410  062D                     l422:	
  2411  062D  0008               	return
  2412  062E                     __end_of___aldiv:	
  2413                           
  2414                           	psect	text10
  2415  0395                     __ptext10:	
  2416 ;; *************** function _Read_USART *****************
  2417 ;; Defined at:
  2418 ;;		line 40 in file "USART.c"
  2419 ;; Parameters:    Size  Location     Type
  2420 ;;		None
  2421 ;; Auto vars:     Size  Location     Type
  2422 ;;		None
  2423 ;; Return value:  Size  Location     Type
  2424 ;;                  1    wreg      unsigned char 
  2425 ;; Registers used:
  2426 ;;		wreg
  2427 ;; Tracked objects:
  2428 ;;		On entry : 0/0
  2429 ;;		On exit  : 0/0
  2430 ;;		Unchanged: 0/0
  2431 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2432 ;;      Params:         0       0       0       0       0
  2433 ;;      Locals:         0       0       0       0       0
  2434 ;;      Temps:          0       0       0       0       0
  2435 ;;      Totals:         0       0       0       0       0
  2436 ;;Total ram usage:        0 bytes
  2437 ;; Hardware stack levels used:    1
  2438 ;; This function calls:
  2439 ;;		Nothing
  2440 ;; This function is called by:
  2441 ;;		_main
  2442 ;;		_Read_USART_String
  2443 ;; This function uses a non-reentrant model
  2444 ;;
  2445                           
  2446                           
  2447                           ;psect for function _Read_USART
  2448  0395                     _Read_USART:	
  2449  0395                     l1435:	
  2450                           ;incstack = 0
  2451                           ; Regs used in _Read_USART: [wreg]
  2452                           
  2453  0395                     l224:	
  2454                           ;USART.c: 41:   while(!RCIF);
  2455                           
  2456  0395  1283               	bcf	3,5	;RP0=0, select bank0
  2457  0396  1303               	bcf	3,6	;RP1=0, select bank0
  2458  0397  1E8C               	btfss	12,5	;volatile
  2459  0398  2B9A               	goto	u1001
  2460  0399  2B9B               	goto	u1000
  2461  039A                     u1001:	
  2462  039A  2B95               	goto	l224
  2463  039B                     u1000:	
  2464  039B                     l1437:	
  2465                           
  2466                           ;USART.c: 42:   return RCREG;
  2467  039B  081A               	movf	26,w	;volatile
  2468  039C                     l227:	
  2469  039C  0008               	return
  2470  039D                     __end_of_Read_USART:	
  2471                           
  2472                           	psect	text11
  2473  038E                     __ptext11:	
  2474 ;; *************** function _LCD_clear *****************
  2475 ;; Defined at:
  2476 ;;		line 42 in file "LCD.c"
  2477 ;; Parameters:    Size  Location     Type
  2478 ;;		None
  2479 ;; Auto vars:     Size  Location     Type
  2480 ;;		None
  2481 ;; Return value:  Size  Location     Type
  2482 ;;                  1    wreg      void 
  2483 ;; Registers used:
  2484 ;;		wreg, status,2, status,0, pclath, cstack
  2485 ;; Tracked objects:
  2486 ;;		On entry : 0/0
  2487 ;;		On exit  : 0/0
  2488 ;;		Unchanged: 0/0
  2489 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2490 ;;      Params:         0       0       0       0       0
  2491 ;;      Locals:         0       0       0       0       0
  2492 ;;      Temps:          0       0       0       0       0
  2493 ;;      Totals:         0       0       0       0       0
  2494 ;;Total ram usage:        0 bytes
  2495 ;; Hardware stack levels used:    1
  2496 ;; Hardware stack levels required when called:    2
  2497 ;; This function calls:
  2498 ;;		_comandosLCD
  2499 ;; This function is called by:
  2500 ;;		_main
  2501 ;; This function uses a non-reentrant model
  2502 ;;
  2503                           
  2504                           
  2505                           ;psect for function _LCD_clear
  2506  038E                     _LCD_clear:	
  2507  038E                     l1391:	
  2508                           ;incstack = 0
  2509                           ; Regs used in _LCD_clear: [wreg+status,2+status,0+pclath+cstack]
  2510                           
  2511                           
  2512                           ;LCD.c: 43:     comandosLCD(1);
  2513  038E  3001               	movlw	1
  2514  038F  120A  118A  23C4  120A  118A  	fcall	_comandosLCD
  2515  0394                     l52:	
  2516  0394  0008               	return
  2517  0395                     __end_of_LCD_clear:	
  2518                           
  2519                           	psect	text12
  2520  03C4                     __ptext12:	
  2521 ;; *************** function _comandosLCD *****************
  2522 ;; Defined at:
  2523 ;;		line 35 in file "LCD.c"
  2524 ;; Parameters:    Size  Location     Type
  2525 ;;  x               1    wreg     unsigned char 
  2526 ;; Auto vars:     Size  Location     Type
  2527 ;;  x               1    3[COMMON] unsigned char 
  2528 ;; Return value:  Size  Location     Type
  2529 ;;                  1    wreg      void 
  2530 ;; Registers used:
  2531 ;;		wreg, status,2, status,0, pclath, cstack
  2532 ;; Tracked objects:
  2533 ;;		On entry : 0/0
  2534 ;;		On exit  : 0/0
  2535 ;;		Unchanged: 0/0
  2536 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2537 ;;      Params:         0       0       0       0       0
  2538 ;;      Locals:         1       0       0       0       0
  2539 ;;      Temps:          2       0       0       0       0
  2540 ;;      Totals:         3       0       0       0       0
  2541 ;;Total ram usage:        3 bytes
  2542 ;; Hardware stack levels used:    1
  2543 ;; Hardware stack levels required when called:    1
  2544 ;; This function calls:
  2545 ;;		_PUERTO
  2546 ;; This function is called by:
  2547 ;;		_LCD_clear
  2548 ;;		_LCD_Set_Cursor
  2549 ;;		_Lcd_Shift_Right
  2550 ;;		_Lcd_Shift_Left
  2551 ;; This function uses a non-reentrant model
  2552 ;;
  2553                           
  2554                           
  2555                           ;psect for function _comandosLCD
  2556  03C4                     _comandosLCD:	
  2557                           
  2558                           ;incstack = 0
  2559                           ; Regs used in _comandosLCD: [wreg+status,2+status,0+pclath+cstack]
  2560                           ;comandosLCD@x stored from wreg
  2561  03C4  00F3               	movwf	comandosLCD@x
  2562  03C5                     l1271:	
  2563                           
  2564                           ;LCD.c: 36:     RE0=0;
  2565  03C5  1283               	bcf	3,5	;RP0=0, select bank0
  2566  03C6  1303               	bcf	3,6	;RP1=0, select bank0
  2567  03C7  1009               	bcf	9,0	;volatile
  2568                           
  2569                           ;LCD.c: 37:     RE1=1;
  2570  03C8  1489               	bsf	9,1	;volatile
  2571  03C9                     l1273:	
  2572                           
  2573                           ;LCD.c: 38:     PUERTO(x);
  2574  03C9  0873               	movf	comandosLCD@x,w
  2575  03CA  120A  118A  2437  120A  118A  	fcall	_PUERTO
  2576  03CF                     l1275:	
  2577                           
  2578                           ;LCD.c: 39:     _delay((unsigned long)((5)*(4000000/4000.0)));
  2579  03CF  3007               	movlw	7
  2580  03D0  00F2               	movwf	??_comandosLCD+1
  2581  03D1  307D               	movlw	125
  2582  03D2  00F1               	movwf	??_comandosLCD
  2583  03D3                     u1177:	
  2584  03D3  0BF1               	decfsz	??_comandosLCD,f
  2585  03D4  2BD3               	goto	u1177
  2586  03D5  0BF2               	decfsz	??_comandosLCD+1,f
  2587  03D6  2BD3               	goto	u1177
  2588  03D7                     l1277:	
  2589                           
  2590                           ;LCD.c: 40:     RE1=0;
  2591  03D7  1283               	bcf	3,5	;RP0=0, select bank0
  2592  03D8  1303               	bcf	3,6	;RP1=0, select bank0
  2593  03D9  1089               	bcf	9,1	;volatile
  2594  03DA                     l49:	
  2595  03DA  0008               	return
  2596  03DB                     __end_of_comandosLCD:	
  2597                           
  2598                           	psect	text13
  2599  04B9                     __ptext13:	
  2600 ;; *************** function _LCD_Init *****************
  2601 ;; Defined at:
  2602 ;;		line 45 in file "LCD.c"
  2603 ;; Parameters:    Size  Location     Type
  2604 ;;		None
  2605 ;; Auto vars:     Size  Location     Type
  2606 ;;		None
  2607 ;; Return value:  Size  Location     Type
  2608 ;;                  1    wreg      void 
  2609 ;; Registers used:
  2610 ;;		wreg, status,2, status,0, pclath, cstack
  2611 ;; Tracked objects:
  2612 ;;		On entry : 0/0
  2613 ;;		On exit  : 0/0
  2614 ;;		Unchanged: 0/0
  2615 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2616 ;;      Params:         0       0       0       0       0
  2617 ;;      Locals:         0       0       0       0       0
  2618 ;;      Temps:          2       0       0       0       0
  2619 ;;      Totals:         2       0       0       0       0
  2620 ;;Total ram usage:        2 bytes
  2621 ;; Hardware stack levels used:    1
  2622 ;; Hardware stack levels required when called:    1
  2623 ;; This function calls:
  2624 ;;		_PUERTO
  2625 ;; This function is called by:
  2626 ;;		_main
  2627 ;; This function uses a non-reentrant model
  2628 ;;
  2629                           
  2630                           
  2631                           ;psect for function _LCD_Init
  2632  04B9                     _LCD_Init:	
  2633  04B9                     l1393:	
  2634                           ;incstack = 0
  2635                           ; Regs used in _LCD_Init: [wreg+status,2+status,0+pclath+cstack]
  2636                           
  2637                           
  2638                           ;LCD.c: 46:   PUERTO(0x00);
  2639  04B9  3000               	movlw	0
  2640  04BA  120A  118A  2437  120A  118A  	fcall	_PUERTO
  2641  04BF                     l1395:	
  2642                           
  2643                           ;LCD.c: 47:    _delay((unsigned long)((20)*(4000000/4000.0)));
  2644  04BF  301A               	movlw	26
  2645  04C0  00F2               	movwf	??_LCD_Init+1
  2646  04C1  30F8               	movlw	248
  2647  04C2  00F1               	movwf	??_LCD_Init
  2648  04C3                     u1187:	
  2649  04C3  0BF1               	decfsz	??_LCD_Init,f
  2650  04C4  2CC3               	goto	u1187
  2651  04C5  0BF2               	decfsz	??_LCD_Init+1,f
  2652  04C6  2CC3               	goto	u1187
  2653  04C7  0000               	nop
  2654  04C8                     l1397:	
  2655                           
  2656                           ;LCD.c: 48:   PUERTO(48);
  2657  04C8  3030               	movlw	48
  2658  04C9  120A  118A  2437  120A  118A  	fcall	_PUERTO
  2659                           
  2660                           ;LCD.c: 49:  _delay((unsigned long)((5)*(4000000/4000.0)));
  2661  04CE  3007               	movlw	7
  2662  04CF  00F2               	movwf	??_LCD_Init+1
  2663  04D0  307D               	movlw	125
  2664  04D1  00F1               	movwf	??_LCD_Init
  2665  04D2                     u1197:	
  2666  04D2  0BF1               	decfsz	??_LCD_Init,f
  2667  04D3  2CD2               	goto	u1197
  2668  04D4  0BF2               	decfsz	??_LCD_Init+1,f
  2669  04D5  2CD2               	goto	u1197
  2670  04D6                     l1399:	
  2671                           
  2672                           ;LCD.c: 50:   PUERTO(48);
  2673  04D6  3030               	movlw	48
  2674  04D7  120A  118A  2437  120A  118A  	fcall	_PUERTO
  2675  04DC                     l1401:	
  2676                           
  2677                           ;LCD.c: 51:  _delay((unsigned long)((11)*(4000000/4000.0)));
  2678  04DC  300F               	movlw	15
  2679  04DD  00F2               	movwf	??_LCD_Init+1
  2680  04DE  3047               	movlw	71
  2681  04DF  00F1               	movwf	??_LCD_Init
  2682  04E0                     u1207:	
  2683  04E0  0BF1               	decfsz	??_LCD_Init,f
  2684  04E1  2CE0               	goto	u1207
  2685  04E2  0BF2               	decfsz	??_LCD_Init+1,f
  2686  04E3  2CE0               	goto	u1207
  2687  04E4  2CE5               	nop2
  2688                           
  2689                           ;LCD.c: 52:   PUERTO(48);
  2690  04E5  3030               	movlw	48
  2691  04E6  120A  118A  2437  120A  118A  	fcall	_PUERTO
  2692                           
  2693                           ;LCD.c: 54:   PUERTO(56);
  2694  04EB  3038               	movlw	56
  2695  04EC  120A  118A  2437  120A  118A  	fcall	_PUERTO
  2696                           
  2697                           ;LCD.c: 55:   PUERTO(8);
  2698  04F1  3008               	movlw	8
  2699  04F2  120A  118A  2437  120A  118A  	fcall	_PUERTO
  2700                           
  2701                           ;LCD.c: 56:   PUERTO(1);
  2702  04F7  3001               	movlw	1
  2703  04F8  120A  118A  2437  120A  118A  	fcall	_PUERTO
  2704                           
  2705                           ;LCD.c: 57:   PUERTO(6);
  2706  04FD  3006               	movlw	6
  2707  04FE  120A  118A  2437  120A  118A  	fcall	_PUERTO
  2708  0503                     l55:	
  2709  0503  0008               	return
  2710  0504                     __end_of_LCD_Init:	
  2711                           
  2712                           	psect	text14
  2713  0437                     __ptext14:	
  2714 ;; *************** function _PUERTO *****************
  2715 ;; Defined at:
  2716 ;;		line 24 in file "LCD.c"
  2717 ;; Parameters:    Size  Location     Type
  2718 ;;  x               1    wreg     unsigned char 
  2719 ;; Auto vars:     Size  Location     Type
  2720 ;;  x               1    0[COMMON] unsigned char 
  2721 ;; Return value:  Size  Location     Type
  2722 ;;                  1    wreg      void 
  2723 ;; Registers used:
  2724 ;;		wreg
  2725 ;; Tracked objects:
  2726 ;;		On entry : 0/0
  2727 ;;		On exit  : 0/0
  2728 ;;		Unchanged: 0/0
  2729 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2730 ;;      Params:         0       0       0       0       0
  2731 ;;      Locals:         1       0       0       0       0
  2732 ;;      Temps:          0       0       0       0       0
  2733 ;;      Totals:         1       0       0       0       0
  2734 ;;Total ram usage:        1 bytes
  2735 ;; Hardware stack levels used:    1
  2736 ;; This function calls:
  2737 ;;		Nothing
  2738 ;; This function is called by:
  2739 ;;		_comandosLCD
  2740 ;;		_LCD_Init
  2741 ;;		_print_LCD_Char
  2742 ;; This function uses a non-reentrant model
  2743 ;;
  2744                           
  2745                           
  2746                           ;psect for function _PUERTO
  2747  0437                     _PUERTO:	
  2748                           
  2749                           ;incstack = 0
  2750                           ; Regs used in _PUERTO: [wreg]
  2751                           ;PUERTO@x stored from wreg
  2752  0437  00F0               	movwf	PUERTO@x
  2753  0438                     l1253:	
  2754                           
  2755                           ;LCD.c: 25:     if(x & 1){RB0=1;}else{RB0=0;}
  2756  0438  1C70               	btfss	PUERTO@x,0
  2757  0439  2C3B               	goto	u591
  2758  043A  2C3C               	goto	u590
  2759  043B                     u591:	
  2760  043B  2C40               	goto	l30
  2761  043C                     u590:	
  2762  043C                     l1255:	
  2763  043C  1283               	bcf	3,5	;RP0=0, select bank0
  2764  043D  1303               	bcf	3,6	;RP1=0, select bank0
  2765  043E  1406               	bsf	6,0	;volatile
  2766  043F  2C43               	goto	l31
  2767  0440                     l30:	
  2768  0440  1283               	bcf	3,5	;RP0=0, select bank0
  2769  0441  1303               	bcf	3,6	;RP1=0, select bank0
  2770  0442  1006               	bcf	6,0	;volatile
  2771  0443                     l31:	
  2772                           
  2773                           ;LCD.c: 26:     if(x & 2){RB1=1;}else{RB1=0;}
  2774  0443  1CF0               	btfss	PUERTO@x,1
  2775  0444  2C46               	goto	u601
  2776  0445  2C47               	goto	u600
  2777  0446                     u601:	
  2778  0446  2C49               	goto	l32
  2779  0447                     u600:	
  2780  0447                     l1257:	
  2781  0447  1486               	bsf	6,1	;volatile
  2782  0448  2C4A               	goto	l33
  2783  0449                     l32:	
  2784  0449  1086               	bcf	6,1	;volatile
  2785  044A                     l33:	
  2786                           
  2787                           ;LCD.c: 27:     if(x & 4){RB2=1;}else{RB2=0;}
  2788  044A  1D70               	btfss	PUERTO@x,2
  2789  044B  2C4D               	goto	u611
  2790  044C  2C4E               	goto	u610
  2791  044D                     u611:	
  2792  044D  2C50               	goto	l34
  2793  044E                     u610:	
  2794  044E                     l1259:	
  2795  044E  1506               	bsf	6,2	;volatile
  2796  044F  2C51               	goto	l35
  2797  0450                     l34:	
  2798  0450  1106               	bcf	6,2	;volatile
  2799  0451                     l35:	
  2800                           
  2801                           ;LCD.c: 28:     if(x & 8){RB3=1;}else{RB3=0;}
  2802  0451  1DF0               	btfss	PUERTO@x,3
  2803  0452  2C54               	goto	u621
  2804  0453  2C55               	goto	u620
  2805  0454                     u621:	
  2806  0454  2C57               	goto	l36
  2807  0455                     u620:	
  2808  0455                     l1261:	
  2809  0455  1586               	bsf	6,3	;volatile
  2810  0456  2C58               	goto	l37
  2811  0457                     l36:	
  2812  0457  1186               	bcf	6,3	;volatile
  2813  0458                     l37:	
  2814                           
  2815                           ;LCD.c: 29:     if(x & 16){RB4=1;}else{RB4=0;}
  2816  0458  1E70               	btfss	PUERTO@x,4
  2817  0459  2C5B               	goto	u631
  2818  045A  2C5C               	goto	u630
  2819  045B                     u631:	
  2820  045B  2C5E               	goto	l38
  2821  045C                     u630:	
  2822  045C                     l1263:	
  2823  045C  1606               	bsf	6,4	;volatile
  2824  045D  2C5F               	goto	l39
  2825  045E                     l38:	
  2826  045E  1206               	bcf	6,4	;volatile
  2827  045F                     l39:	
  2828                           
  2829                           ;LCD.c: 30:     if(x & 32){RB5=1;}else{RB5=0;}
  2830  045F  1EF0               	btfss	PUERTO@x,5
  2831  0460  2C62               	goto	u641
  2832  0461  2C63               	goto	u640
  2833  0462                     u641:	
  2834  0462  2C65               	goto	l40
  2835  0463                     u640:	
  2836  0463                     l1265:	
  2837  0463  1686               	bsf	6,5	;volatile
  2838  0464  2C66               	goto	l41
  2839  0465                     l40:	
  2840  0465  1286               	bcf	6,5	;volatile
  2841  0466                     l41:	
  2842                           
  2843                           ;LCD.c: 31:     if(x & 64){RB6=1;}else{RB6=0;}
  2844  0466  1F70               	btfss	PUERTO@x,6
  2845  0467  2C69               	goto	u651
  2846  0468  2C6A               	goto	u650
  2847  0469                     u651:	
  2848  0469  2C6C               	goto	l42
  2849  046A                     u650:	
  2850  046A                     l1267:	
  2851  046A  1706               	bsf	6,6	;volatile
  2852  046B  2C6D               	goto	l43
  2853  046C                     l42:	
  2854  046C  1306               	bcf	6,6	;volatile
  2855  046D                     l43:	
  2856                           
  2857                           ;LCD.c: 32:     if(x & 128){RB7=1;}else{RB7=0;}
  2858  046D  1FF0               	btfss	PUERTO@x,7
  2859  046E  2C70               	goto	u661
  2860  046F  2C71               	goto	u660
  2861  0470                     u661:	
  2862  0470  2C73               	goto	l44
  2863  0471                     u660:	
  2864  0471                     l1269:	
  2865  0471  1786               	bsf	6,7	;volatile
  2866  0472  2C74               	goto	l46
  2867  0473                     l44:	
  2868  0473  1386               	bcf	6,7	;volatile
  2869  0474                     l46:	
  2870  0474  0008               	return
  2871  0475                     __end_of_PUERTO:	
  2872  007E                     btemp	set	126	;btemp
  2873  007E                     wtemp0	set	126


Data Sizes:
    Strings     29
    Constant    10
    Data        0
    BSS         10
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     25      35
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(1) Largest target is 3
		 -> STR_1(CODE[3]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 8
		 -> valor(BANK0[8]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    Write_USART_String@a	PTR unsigned char  size(1) Largest target is 26
		 -> STR_2(CODE[26]), 


Critical Paths under _main in COMMON

    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _Write_USART_String->_Write_USART
    _USART_Init->___aldiv
    _LCD_clear->_comandosLCD
    _comandosLCD->_PUERTO
    _LCD_Init->_PUERTO

Critical Paths under _main in BANK0

    _main->_USART_Init
    _USART_Init->___aldiv

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0    2588
                                             22 BANK0      3     3      0
                           _LCD_Init
                          _LCD_clear
                         _Read_USART
                         _USART_Init
                        _Write_USART
                 _Write_USART_String
                          _configADC
                           _configIO
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             21    18      3    1211
                                              0 BANK0     13    10      3
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     311
                                              8 COMMON     6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     314
                                              0 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (1) _configIO                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _configADC                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Write_USART_String                                   3     3      0     145
                                              1 COMMON     3     3      0
                        _Write_USART
 ---------------------------------------------------------------------------------
 (2) _Write_USART                                          1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _USART_Init                                          18    14      4     836
                                              9 COMMON     2     2      0
                                              6 BANK0     16    12      4
                            ___aldiv
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             15     7      8     604
                                              0 COMMON     9     1      8
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (1) _Read_USART                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LCD_clear                                            0     0      0     198
                        _comandosLCD
 ---------------------------------------------------------------------------------
 (2) _comandosLCD                                          3     3      0     198
                                              1 COMMON     3     3      0
                             _PUERTO
 ---------------------------------------------------------------------------------
 (1) _LCD_Init                                             2     2      0     176
                                              1 COMMON     2     2      0
                             _PUERTO
 ---------------------------------------------------------------------------------
 (3) _PUERTO                                               1     1      0     176
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LCD_Init
     _PUERTO
   _LCD_clear
     _comandosLCD
       _PUERTO
   _Read_USART
   _USART_Init
     ___aldiv
   _Write_USART
   _Write_USART_String
     _Write_USART
   _configADC
   _configIO
   _sprintf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      E       E       1      100.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      31       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     19      23       5       43.8%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      31      12        0.0%


Microchip Technology PIC Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Sun Feb 09 20:58:24 2020

                          pc 0002                  __CFG_CP$OFF 0000                           l30 0440  
                         l31 0443                           l40 0465                           l32 0449  
                         l41 0466                           l33 044A                           l42 046C  
                         l34 0450                           l43 046D                           l35 0451  
                         l44 0473                           l36 0457                           l52 0394  
                         l37 0458                           l46 0474                           l38 045E  
                         l39 045F                           l55 0503                           l49 03DA  
                         fsr 0004         __size_of_Write_USART 000C                          l212 03A8  
                        l221 03FC                          l215 03B2                          l224 0395  
                        l136 03C3                          l209 0707                          l227 039C  
                        l412 05A5                          l157 03A6                          l422 062D  
                        l343 07EF                 comandosLCD@x 0073                          l619 04B8  
                        l629 0436                          _RB0 0030                          _RB1 0031  
                        _RB2 0032                          _RB3 0033                          _RB4 0034  
                        _RB5 0035                          _RE0 0048                          _RB6 0036  
                        _RE1 0049                          _RB7 0037                          u600 0447  
                        u601 0446                          u610 044E                 __CFG_CPD$OFF 0000  
                        u611 044D                          u620 0455                          u700 05C8  
                        u621 0454                          u701 05C7                          u630 045C  
                        u631 045B                          u640 0463                          u720 05DC  
                        u800 048F                          u641 0462                          u721 05DB  
                        u801 048E                          u650 046A                          u651 0469  
                        u715 05CD                          u660 0471                          u740 05F7  
                        u820 04A0                          u900 0432                          u661 0470  
                        u741 05F6                          u821 049F                          u901 0431  
                        u590 043C                          u670 03AE                          u591 043B  
                        u735 05DE                          u671 03AD                          u815 0490  
                        u760 0615                          u680 0598                          u920 063E  
                        u840 04B4                          u761 0614                          u745 05F3  
                        u681 0597                          u841 04B3                          u825 049C  
                        u770 061A                          u690 05A9                          u930 0657  
                        u850 0403                          u771 0619                          u755 0607  
                        u691 05A8                          u835 04A8                          u851 0402  
                        u780 047D                          u941 0669                          u925 0639  
                        u781 047C                          u950 0690                          u942 066A  
                        u870 0415                          u951 068F                          u943 066F  
                        u935 0652                          u871 0414                          u960 06A0  
                        u944 0670                          u880 041F                          u945 0675  
                        u881 041E                          u865 0407                          u970 06B9  
                        u946 0676                          u795 0481                          u981 06CB  
                        u965 069B                          u885 041B                          u990 06F5  
                        u982 06CC                          u991 06F4                          u983 06D1  
                        u975 06B4                          u895 0426                          u984 06D2  
                        u985 06D7                          u986 06D8                          fsr0 0004  
                        indf 0000  __size_of_Write_USART_String 0022                 __CFG_LVP$OFF 0000  
                       l1301 05D8                         l1311 0606                         l1303 05DC  
                       l1401 04DC                         l1313 060F                         l1305 05E5  
                       l1307 05F7                         l1315 0615                         l1411 0687  
                       l1403 03B3                         l1331 0487                         l1323 0475  
                       l1261 0455                         l1253 0438                         l1317 061A  
                       l1309 0605                         l1421 06F9                         l1413 0690  
                       l1405 039D                         l1341 04A7                         l1333 048B  
                       l1325 0477                         l1263 045C                         l1255 043C  
                       l1271 03C5                         l1319 0625                         l1431 0704  
                       l1423 06FA                         l1415 06E9                         l1503 03DC  
                       l1407 03A3                         l1343 04AE                         l1335 048F  
                       l1327 047D                         l1351 0403                         l1265 0463  
                       l1257 0447                         l1273 03C9                         l1425 06FD  
                       l1417 06EC                         l1409 062E                         l1281 03AE  
                       l1505 03DE                         l1337 04A0                         l1329 0480  
                       l1345 04B4                         l1361 041F                         l1353 0406  
                       l1601 0735                         l1441 070B                         l1267 046A  
                       l1259 044E                         l1275 03CF                         l1435 0395  
                       l1291 05B4                         l1283 0591                         l1427 0700  
                       l1419 06F5                         l1507 03EB                         l1339 04A6  
                       l1363 0425                         l1355 040D                         l1443 0710  
                       l1269 0471                         l1277 03D7                         l1437 039B  
                       l1293 05B8                         l1285 0594                         l1429 0701  
                       l1509 03EF                         l1365 042C                         l1357 0411  
                       l1349 03FD                         l1461 0750                         l1453 0723  
                       l1445 0716                         l1541 051D                         l1391 038E  
                       l1295 05C0                         l1287 0598                         l1279 03A8  
                       l1359 0415                         l1367 0432                         l1471 075B  
                       l1463 0754                         l1455 0740                         l1447 071D  
                       l1551 053D                         l1543 0522                         l1535 0504  
                       l1393 04B9                         l1297 05C8                         l1289 05A9  
                       l1481 078E                         l1465 0759                         l1457 0748  
                       l1449 0722                         l1561 0561                         l1553 0542  
                       l1545 0527                         l1537 0509                         l1395 04BF  
                       l1299 05CB                         l1491 07D0                         l1483 0792  
                       l1475 0777                         l1459 074C                         l1571 057F  
                       l1563 0567                         l1555 0548                         l1547 052D  
                       l1539 050E                         l1397 04C8                         l1485 0797  
                       l1477 0781                         l1493 07D9                         l1565 056D  
                       l1557 054A                         l1549 0537                         l1399 04D6  
                       l1487 07C5                         l1479 0787                         l1495 07EB  
                       l1567 0573                         l1559 055B                         l1489 07CC  
                       l1569 0579                         STR_1 002D                         STR_2 0013  
                       _BRGH 04C2                         u1000 039B                         _CREN 00C4  
                       u1001 039A                         u1010 0716                         u1011 0715  
                       u1020 0750                         u1021 074F                         u1030 0776  
                       u1031 0775                         u1040 0781                         u1120 052D  
                       u1041 0780                         u1121 052C                         u1050 0787  
                       u1130 053D                         u1051 0786                         u1035 0772  
                       u1131 053C                         u1060 07D9                         u1140 0548  
                       u1061 07D8                         u1141 0547                         u1070 07EB  
                       u1207 04E0                         u1071 07EA                         u1080 03FC  
                       u1081 03FB                         u1167 0587                         u1177 03D3  
                       u1187 04C3                         u1197 04D2                         _RCIF 0065  
                       _SPEN 00C7                         _TRMT 04C1                         _TXEN 04C5  
                       _SYNC 04C4                 __CFG_WRT$OFF 0000                         _main 0504  
                       btemp 007E                         start 0000                __CFG_IESO$OFF 0000  
         __size_of_LCD_clear 0007             __end_of_LCD_Init 0504              __end_of___aldiv 062E  
                      ?_main 0070                __CFG_WDTE$OFF 0000                        _ANSEL 0188  
            __end_of___lwdiv 04B9              __end_of___lwmod 0437                        _RCREG 001A  
                      _SPBRG 0099                        _PORTA 0005                        _PORTB 0006  
                      _PORTD 0008                        _PORTE 0009                        _TRISA 0085  
                      _TRISB 0086                        _TRISD 0088                        _TRISE 0089  
                      _TXREG 0019               __CFG_FCMEN$OFF 0000              __end_of_dpowers 0013  
                      _valor 003B               __CFG_BOREN$OFF 0000                        pclath 000A  
                      status 0003                        wtemp0 007E              __end_of_sprintf 07F0  
                ?_USART_Init 0026               __CFG_MCLRE$OFF 0000              __initialization 07F0  
                 _Read_USART 0395                 __end_of_main 0591                       ??_main 0036  
          __end_of_LCD_clear 0395                       _ADCON1 009F                       _ADRESH 001E  
                     _ANSELH 0189                       _PUERTO 0437                       _TRISC6 043E  
                     _TRISC7 043F               __CFG_PWRTE$OFF 0000         __size_of_comandosLCD 0017  
           __end_of_configIO 03C4                    ??___aldiv 0078                    ??___lwdiv 0074  
                  ??___lwmod 007C          __size_of_USART_Init 00DA                    ??_sprintf 0023  
    __end_of__initialization 07FC                    ?_LCD_Init 0070                  ?_Read_USART 0070  
             __pcstackCOMMON 0070           __size_of_configADC 000A                 Write_USART@x 0070  
                 __pbssBANK0 0039                   ??_LCD_Init 0071                      ?_PUERTO 0070  
                 __pmaintext 0504                      PUERTO@x 0070                ??_Write_USART 0070  
 __end_of_Write_USART_String 03FD          __size_of_Read_USART 0008                    ?_configIO 0070  
                 __stringtab 0003              __size_of_PUERTO 003E                 ??_USART_Init 002A  
          __end_of_configADC 03A7                      ___aldiv 0591                      ___lwdiv 0475  
                    ___lwmod 03FD                    _ANSELbits 0188                      __ptext1 0708  
                    __ptext2 03FD                      __ptext3 0475                      __ptext4 03B3  
                    __ptext5 039D                      __ptext6 03DB                      __ptext7 03A7  
                    __ptext8 062E                      __ptext9 0591                      _dpowers 0009  
        __end_of_Write_USART 03B3             ___aldiv@dividend 0074           __end_of_USART_Init 0708  
                 ??_configIO 0070                      _sprintf 0708                    _LCD_clear 038E  
       end_of_initialization 07FC             ___aldiv@quotient 0022                    _TRISAbits 0085  
                  _TRISBbits 0086                    _TRISEbits 0089                   ?_LCD_clear 0070  
              ??_comandosLCD 0071               __end_of_PUERTO 0475            __size_of_LCD_Init 004B  
               ??_Read_USART 0070                  _Write_USART 03A7                  USART_Init@x 0079  
        start_initialization 07F0           __end_of_Read_USART 039D                     ??_PUERTO 0070  
               _lecturaUSART 003A     __CFG_FOSC$INTRC_NOCLKOUT 0000          __end_of_comandosLCD 03DB  
                  ___latbits 0002                __pcstackBANK0 0020                  ??_LCD_clear 0074  
          __size_of_configIO 0011                  sprintf@flag 0027           _Write_USART_String 03DB  
                sprintf@prec 0028             ___lwdiv@dividend 0072          ?_Write_USART_String 0070  
                   ?___aldiv 0070                     ?___lwdiv 0070                     ?___lwmod 0078  
                  _configADC 039D                    __pstrings 0003         ??_Write_USART_String 0071  
           ___lwdiv@quotient 0075                     ?_sprintf 0020              ___aldiv@divisor 0070  
            ___aldiv@counter 0020                     _LCD_Init 04B9                  _comandosLCD 03C4  
                 ?_configADC 0070                   _ADCON0bits 001F                  __stringbase 0008  
         USART_Init@baudrate 0026                 ?_Write_USART 0070             __size_of___aldiv 009D  
           __size_of___lwdiv 0044             __size_of___lwmod 003A           __end_of__stringtab 0009  
                 _ANSELHbits 0189                   sprintf@val 0029              ___lwdiv@divisor 0070  
            ___lwdiv@counter 0077                     __ptext10 0395                     __ptext11 038E  
                   __ptext12 03C4                     __ptext13 04B9                     __ptext14 0437  
          __CFG_BOR4V$BOR40V 0000                     _configIO 03B3                     _contador 0039  
           __size_of_sprintf 00E8                __size_of_main 008D                  ??_configADC 0070  
        Write_USART_String@a 0072          Write_USART_String@i 0073                    sprintf@ap 0026  
                  sprintf@sp 002B             ___lwmod@dividend 007A                    stringcode 0003  
                   sprintf@c 002C                     sprintf@f 0020              ___lwmod@divisor 0078  
            ___lwmod@counter 007D                     stringdir 0003                     stringtab 0003  
               ___aldiv@sign 0021                 ?_comandosLCD 0070                   _USART_Init 062E  
